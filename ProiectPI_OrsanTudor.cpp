//Proiect PI final / Orsan Tudor Alexandru - 30235;
//Recunoastere text din documente;





//INCLUDURI:

#include "stdafx.h"
#include "common.h"
#include <stdio.h>
#include <stdlib.h>
#include <math.h> 
#include <queue> 
#include <random> 

#include <iostream>
#include <fstream>

using namespace std;




//Pentru construirea unei baze de date cu care sa compar rezultatele:
//Aici am litere mici, mari, cifre si caractere speciale;
//Am salvat aria literei, media in functie de proiectiile calculate si
//proiectiile salvate in siruri de 150 (adica pe linii si pe coloane, o imagine de 150x150)

//LITERELE MICI:


//Literele mici finale:
int litereMiciArie[28];
float litereMiciMedie[28];
int litereMiciI[28][150];
int litereMiciJ[28][150];



//a)
int arieLiteraa = 9916;
float medieIJLiteraa = 66.106667;
int valoriILiteraa[150] = { 
	25, 25, 25, 25, 25, 25, 25, 25, 31, 31, 31, 31,
31, 39, 38, 38, 38, 38, 38, 43, 43, 43, 43, 43, 55,
55, 55, 55, 55, 69, 69, 69, 69, 69, 69, 75, 75, 75,
75, 75, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
75, 75, 75, 75, 75, 56, 55, 55, 55, 55, 55, 43, 43,
43, 43, 44, 43, 43, 43, 43, 43, 49, 49, 49, 49, 49,
50, 56, 56, 56, 56, 56, 62, 61, 61, 61, 61, 69, 68,
68, 68, 68, 68, 68, 68, 68, 68, 68, 74, 74, 74, 74,
74, 76, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 84,
84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 90, 90, 90,
90, 90, 97, 96, 96, 96, 96, 98, 110, 110, 110, 110, 110,
87, 87, 87, 87, 87, 87, 87, 87 };
int valoriJLiteraa[150] = { 
22, 22, 22, 22, 22, 22, 22, 22, 22, 65, 65, 65,
65, 65, 65, 65, 83, 83, 83, 83, 83, 83, 99, 99, 99,
99, 99, 99, 111, 111, 111, 111, 111, 111, 91, 89, 89, 89,
89, 89, 89, 57, 56, 56, 56, 56, 56, 30, 30, 30, 30,
30, 30, 25, 23, 23, 23, 23, 23, 11, 10, 10, 10, 10,
10, 11, 14, 14, 14, 14, 14, 14, 8, 8, 8, 8, 8,
8, 13, 13, 13, 13, 13, 13, 19, 19, 19, 19, 19, 19,
21, 129, 129, 129, 129, 129, 129, 142, 142, 142, 142, 142, 142,
142, 142, 142, 142, 142, 142, 137, 137, 137, 137, 137, 137, 137,
131, 131, 131, 131, 131, 131, 126, 126, 126, 126, 126, 126, 115,
115, 115, 115, 115, 115, 14, 13, 13, 13, 13, 13, 13, 5,
5, 5, 5, 5, 5, 5, 5, 5 }; 



//b)
int arieLiterab = 8463;
float medieIJLiterab = 56.419998;
int valoriILiterab[150] = { 
53, 53, 39, 39, 39, 39, 39, 39, 39, 39, 34, 34,
34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
34, 34, 34, 34, 34, 34, 50, 50, 50, 50, 78, 78, 78,
79, 69, 68, 68, 68, 72, 72, 72, 72, 68, 68, 68, 68,
68, 68, 68, 76, 76, 76, 76, 70, 70, 70, 70, 70, 70,
70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
70, 70, 70, 70, 70, 62, 62, 62, 62, 62, 62, 62, 62,
62, 62, 62, 62, 57, 57, 57, 58, 56, 56, 56, 40, 38,
38, 38, 29, 29, 29, 29, 62, 62 };
int valoriJLiterab[150] = { 
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
2, 2, 10, 10, 10, 10, 10, 150, 150, 150, 150, 150, 150,
144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 140, 140,
140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
140, 141, 12, 11, 11, 11, 11, 6, 6, 6, 6, 6, 6,
2, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 6, 6,
6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
6, 6, 10, 10, 10, 10, 10, 18, 18, 18, 18, 18, 18,
26, 26, 26, 26, 26, 44, 44, 44, 44, 44, 44, 96, 96,
96, 96, 96, 90, 88, 88, 88, 88, 88, 85, 85, 85, 85,
85, 85, 77, 77, 77, 77, 77, 69, 69, 69, 69, 69, 69,
54, 54, 54, 54, 54, 54, 54, 54 }; 


//c)
int arieLiterac = 8022;
float medieIJLiterac = 53.480000;
int valoriILiterac[150] = { 
	29, 29, 29, 29, 29, 29, 29, 29, 36, 36, 36, 36,
37, 58, 58, 58, 58, 58, 58, 58, 57, 57, 57, 57, 75,
75, 75, 75, 75, 76, 75, 74, 74, 74, 74, 74, 74, 74,
74, 74, 65, 63, 63, 63, 63, 63, 49, 49, 49, 49, 49,
35, 35, 35, 35, 35, 46, 46, 46, 46, 46, 46, 46, 46,
46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 47, 54, 54,
54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54,
54, 52, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
50, 50, 57, 57, 57, 57, 57, 59, 86, 86, 86, 86, 86,
65, 65, 65, 65, 65, 65, 65, 652 };
int valoriJLiterac[150] = { 
48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 49, 75,
75, 75, 75, 75, 75, 75, 97, 97, 97, 97, 97, 97, 97,
107, 107, 107, 107, 107, 107, 107, 118, 118, 118, 118, 118, 118,
118, 129, 129, 129, 129, 129, 129, 129, 81, 79, 78, 78, 78,
78, 78, 79, 57, 57, 57, 57, 57, 57, 57, 35, 35, 35,
35, 35, 35, 35, 24, 24, 24, 24, 24, 24, 24, 27, 27,
27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 22,
21, 21, 21, 21, 21, 21, 32, 32, 32, 32, 32, 32, 32,
33, 45, 45, 45, 45, 45, 45, 46, 43, 43, 43, 43, 43,
43, 43, 48, 48, 48, 48, 48, 48, 48, 38, 38, 38, 38,
38, 38, 39, 27, 27, 27, 27, 27, 27, 27, 17, 16, 16,
16, 16, 16, 16, 16, 16, 16, 16 }; 


//d)
int arieLiterad = 9436;
float medieIJLiterad = 62.906666;
int valoriILiterad[150] = { 
	61, 61, 44, 44, 44, 44, 39, 39, 39, 39, 39, 39,
39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
39, 39, 39, 39, 39, 39, 50, 50, 50, 50, 56, 56, 56,
56, 61, 61, 61, 61, 67, 67, 67, 67, 72, 72, 72, 68,
67, 67, 67, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73,
73, 73, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
75, 75, 75, 75, 75, 75, 75, 81, 81, 81, 81, 81, 81,
81, 81, 81, 81, 81, 73, 73, 73, 73, 73, 73, 73, 73,
72, 72, 72, 72, 77, 77, 77, 77, 67, 67, 67, 73, 73,
73, 74, 79, 78, 78, 78, 78, 78 };
int valoriJLiterad[150] = {
	42, 42, 42, 42, 42, 42, 42, 42, 62, 62, 62, 62,
62, 62, 77, 77, 77, 77, 77, 84, 84, 84, 84, 84, 84,
92, 92, 92, 92, 92, 93, 98, 98, 98, 98, 98, 71, 71,
71, 71, 71, 71, 33, 33, 33, 33, 33, 14, 14, 14, 14,
14, 14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 2, 2,
2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2,
2, 2, 13, 13, 13, 13, 14, 150, 150, 150, 150, 150, 150,
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
150, 150, 144, 144, 144, 144, 144, 4, 4, 4, 4, 4, 4,
0, 0, 0, 0, 0, 0, 0, 0 }; 


//e)
int arieLiterae = 8605;
float medieIJLiterae = 57.366665;
int valoriILiterae[150] = { 
21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22,
23, 44, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 50,
50, 50, 50, 50, 58, 57, 56, 56, 56, 57, 67, 67, 67,
67, 67, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74,
74, 74, 74, 74, 74, 85, 85, 85, 85, 85, 87, 150, 150,
150, 150, 150, 47, 46, 46, 46, 46, 46, 46, 46, 46, 46,
46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
46, 46, 46, 47, 54, 54, 54, 54, 54, 54, 54, 54, 54,
54, 45, 43, 43, 43, 43, 43, 50, 50, 50, 50, 50, 50,
50, 50, 50, 50, 52, 54, 54, 54, 54, 54, 57, 57, 57,
57, 57, 57, 57, 57, 57, 57, 59, 93, 93, 93, 93, 93,
65, 65, 65, 65, 65, 65, 65, 65 };
int valoriJLiterae[150] = { 
48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 49, 81,
81, 81, 81, 81, 81, 81, 102, 102, 102, 102, 102, 102, 102,
113, 113, 113, 113, 113, 113, 113, 123, 123, 123, 123, 123, 123,
123, 129, 129, 129, 129, 129, 129, 129, 82, 78, 77, 77, 77,
77, 77, 78, 56, 56, 56, 56, 56, 56, 56, 35, 35, 34,
34, 34, 34, 34, 29, 29, 29, 29, 29, 29, 29, 32, 32,
32, 32, 32, 32, 32, 27, 26, 26, 26, 26, 26, 26, 26,
26, 26, 26, 26, 26, 26, 24, 23, 23, 23, 23, 23, 23,
24, 29, 29, 29, 29, 29, 29, 30, 59, 59, 59, 59, 59,
59, 59, 59, 59, 59, 59, 59, 59, 59, 48, 48, 48, 48,
48, 48, 49, 38, 38, 38, 38, 38, 38, 38, 33, 32, 32,
32, 32, 32, 32, 37, 37, 37, 37 }; 


//f)
int arieLiteraf = 7429;
float medieIJLiteraf = 49.526669;
int valoriILiteraf[150] = { 
	29, 29, 29, 29, 29, 29, 42, 42, 42, 44, 67, 67,
67, 69, 68, 68, 68, 68, 68, 68, 68, 75, 75, 75, 75,
57, 57, 57, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43,
43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43,
43, 104, 104, 104, 104, 104, 104, 104, 104, 43, 43, 43, 43,
43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43,
43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43,
43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43,
43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43,
43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43,
43, 43, 43, 43, 43, 43, 43, 44, 50, 50, 50, 50, 50,
50, 50, 50, 50, 50, 50, 64, 64
};
int valoriJLiteraf[150] = { 
8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
10, 10, 10, 10, 10, 10, 10, 125, 125, 125, 125, 125, 125,
125, 129, 129, 129, 129, 129, 129, 129, 137, 137, 137, 137, 137,
137, 137, 137, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
140, 140, 140, 141, 144, 144, 144, 144, 144, 144, 144, 30, 28,
28, 28, 28, 28, 28, 10, 10, 10, 10, 10, 10, 10, 14,
14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
14, 6, 6, 6, 6, 6, 6, 6, 25, 25, 25, 25, 25,
25, 25, 19, 19, 19, 19, 19, 19, 19, 23, 23, 23, 23,
23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 16, 15, 15,
15, 15, 15, 15, 15, 15, 15, 15 };




//g)
int arieLiterag = 9151;
float medieIJLiterag = 61.006668;
int valoriILiterag[150] = { 34, 34, 34, 34, 34, 62, 62, 62, 62, 88,
88, 88, 105, 77, 77, 77, 66, 66, 66, 67, 60, 60, 60, 56, 56, 56, 56,
53, 53, 53, 53, 53, 53, 53, 49, 49, 49, 49, 49, 49, 49, 46, 46, 46, 
46, 46, 46, 46, 46, 46, 46, 46, 42, 42, 42, 35, 35, 35, 35, 40, 40, 
40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 
40, 40, 40, 40, 40, 40, 40, 40, 40, 105, 105, 105, 105, 105, 105, 105,
105, 85, 85, 85, 74, 74, 74, 74, 70, 70, 70, 74, 74, 74, 74, 70, 70, 
70, 70, 70, 70, 70, 70, 70, 70, 70, 66, 66, 66, 70, 70, 70, 70, 70, 
70, 70, 70, 70, 70, 70, 66, 66, 66, 80, 77, 77, 77, 91, 91, 91, 91, 
70, 70, 70, 70, 70 };
int valoriJLiterag[150] = { 39, 39, 39, 39, 39, 61, 61, 61, 61, 75, 
75, 75, 86, 86, 86, 86, 97, 97, 97, 103, 103, 103, 103, 111, 111, 111,
114, 114, 114, 115, 122, 122, 122, 129, 129, 129, 129, 129, 129, 129,
83, 83, 83, 83, 61, 61, 61, 52, 52, 52, 52, 45, 45, 45, 38, 38, 38, 38, 
31, 31, 31, 24, 24, 24, 24, 29, 29, 29, 22, 22, 22, 22, 22, 22, 22, 22, 
22, 22, 22, 22, 22, 22, 22, 22, 22, 30, 30, 30, 30, 30, 30, 30, 25, 25, 
25, 25, 35, 35, 35, 39, 39, 39, 39, 78, 78, 78, 74, 74, 74, 74, 77, 77, 
77, 81, 81, 81, 81, 76, 76, 76, 80, 80, 80, 80, 87, 87, 87, 97, 97, 97, 
97, 109, 109, 109, 109, 109, 109, 109, 11, 11, 11, 8, 8, 8, 8, 8, 8, 8, 
8, 8 };





//h)
int arieLiterah = 8956;
float medieIJLiterah = 59.706665;
int valoriILiterah[150] = {
	53, 53, 45, 45, 45, 45, 39, 39, 39, 39, 39, 39,
39, 39, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
34, 34, 34, 34, 34, 34, 34, 45, 45, 45, 45, 72, 72,
72, 74, 84, 84, 84, 84, 69, 68, 68, 68, 84, 84, 84,
84, 72, 72, 72, 72, 67, 67, 67, 67, 67, 67, 67, 67,
67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 72, 72,
72, 72, 89, 89, 89, 89, 100, 100 };
int valoriJLiterah[150] = { 2, 2, 2, 2, 2, 2, 2, 2, 8, 8, 8, 8,
8, 8, 24, 24, 24, 24, 24, 150, 150, 150, 150, 150, 150,
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
150, 150, 14, 14, 14, 14, 14, 4, 4, 4, 4, 4, 4,
0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 4, 4,
4, 4, 4, 5, 8, 8, 8, 8, 8, 8, 8, 8, 8,
8, 8, 10, 10, 10, 10, 10, 26, 26, 26, 26, 26, 26,
105, 105, 105, 105, 105, 101, 101, 101, 101, 101, 101, 101, 101,
101, 101, 101, 98, 97, 97, 97, 97, 97, 93, 93, 93, 93,
93, 93, 89, 89, 89, 89, 89, 6, 6, 6, 6, 6, 6,
0, 0, 0, 0, 0, 0, 0, 0 }; 


//i)
int arieLiterai = 12405;
float medieIJLiterai = 82.699997;
int valoriILiterai[150] = { 
	121, 121, 121, 92, 92, 92, 92, 92, 92, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81,
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 
	81, 81, 81, 81, 81, 104, 104, 104 };
int valoriJLiterai[150] = { 3, 3, 3, 3, 3, 3, 3, 3, 3, 
3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
3, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 150, 150, 
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 
150, 150, 150, 150, 150, 150, 150, 3, 3, 3, 3, 3, 3, 3, 
3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0 };


//j)
int arieLiteraj = 67.080002;
float medieIJLiteraj = 10062;
int valoriILiteraj[150] = { 
	95, 95, 75, 75, 75, 75, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 65, 55, 55, 55, 55, 65, 65, 65, 65, 85, 
	85, 85, 85, 100, 100, 100, 100, 85, 85, 85, 62, 60, 
	60, 60, 50, 50, 50, 50, 90, 90 };
int valoriJLiteraj[150] = { 
	7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 15, 15, 
	15, 15, 15, 15, 15, 15, 15, 15, 25, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 21, 21, 21, 21, 21, 21, 21, 21, 
	21, 21, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 8, 8, 
	8, 8, 8, 8, 8, 8, 8, 127, 127, 127, 127, 127, 127, 127,
	127, 127, 127, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
	141, 140, 140, 140, 140, 140, 140, 140, 140, 140, 137,
	137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
	137, 137, 137 };


//k)
int arieLiterak = 7855;
float medieIJLiterak = 52.366665;
int valoriILiterak[150] = { 
	53, 53, 41, 41, 41, 41, 36, 36, 36, 36, 36, 36,
36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 62, 62,
62, 62, 52, 52, 52, 52, 47, 47, 47, 47, 42, 42, 42,
42, 42, 42, 42, 42, 42, 42, 42, 42, 37, 37, 37, 37,
37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 47,
47, 47, 47, 57, 57, 57, 57, 67, 67, 67, 67, 72, 72,
72, 72, 77, 77, 77, 77, 72, 72, 72, 77, 72, 72, 72,
72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 67,
67, 67, 67, 72, 72, 72, 72, 72, 72, 72, 72, 77, 77,
77, 77, 77, 77, 77, 77, 92, 92 };
int valoriJLiterak[150] = { 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
8, 8, 8, 8, 8, 150, 150, 150, 150, 150, 150, 150, 150,
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
150, 150, 6, 6, 6, 6, 6, 0, 0, 0, 0, 4, 4,
4, 4, 4, 12, 12, 12, 12, 12, 20, 20, 20, 20, 20,
31, 31, 31, 31, 31, 35, 35, 35, 35, 35, 43, 35, 35,
35, 35, 47, 39, 39, 39, 39, 57, 45, 45, 45, 45, 57,
49, 49, 49, 49, 65, 58, 58, 58, 58, 58, 42, 42, 42,
42, 42, 34, 34, 34, 34, 34, 22, 22, 22, 22, 22, 14,
14, 14, 14, 14, 10, 10, 10, 10, 10, 2, 2, 2, 2,
2, 0, 0, 0, 0, 0, 0, 0 }; 


//l)
int arieLiteral = 10868;
float medieIJLiteral = 72.453331;
int valoriILiteral[150] = { 
110, 110, 81, 81, 81, 81, 81, 81, 81, 81, 70, 70,
70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 81, 81,
81, 81, 92, 92, 92, 92, 104, 104 };
int valoriJLiteral[150] = {
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
2, 2, 2, 2, 16, 16, 16, 16, 16, 16, 16, 16, 16,
16, 16, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
150, 150, 150, 150, 150, 150, 150, 10, 10, 10, 10, 10, 10,
10, 10, 10, 10, 10, 2, 2, 2, 2, 2, 2, 2, 2,
2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0 }; 


//m)
int arieLiteram = 10334;
float medieIJLiteram = 68.893333;
int valoriILiteram[150] = { 
16, 16, 16, 16, 16, 16, 16, 16, 80, 80, 80, 80,
80, 80, 90, 90, 90, 90, 90, 79, 75, 75, 75, 75, 75,
73, 73, 73, 73, 73, 75, 73, 73, 73, 73, 73, 66, 66,
66, 66, 66, 67, 70, 70, 70, 70, 70, 70, 70, 70, 70,
70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
70, 70, 70, 70, 70, 90, 90, 90 };
int valoriJLiteram[150] = {
0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9,
142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 14, 14, 14,
6, 6, 6, 6, 6, 6, 6, 1, 0, 0, 5, 5, 5,
5, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 28, 28,
28, 150, 150, 150, 142, 142, 142, 142, 142, 142, 142, 142, 142,
142, 136, 136, 136, 136, 131, 131, 131, 120, 119, 119, 8, 8,
8, 9, 6, 6, 6, 6, 6, 6, 1, 0, 0, 0, 5,
5, 5, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 28,
28, 28, 150, 150, 150, 150, 150, 150, 150, 142, 142, 142, 142,
142, 142, 142, 136, 136, 136, 131, 131, 131, 109, 108, 108, 108,
3, 3, 3, 0, 0, 0, 0, 0 };

//n)
int arieLiteran = 10328;
float medieIJLiteran = 68.853333;
int valoriILiteran[150] = { 
17, 17, 17, 17, 17, 17, 17, 17, 78, 78, 78, 78,
78, 78, 95, 95, 95, 95, 95, 72, 69, 68, 68, 68, 68,
78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 72, 72,
72, 72, 72, 72, 72, 72, 72, 72, 72, 67, 67, 67, 67,
67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
67, 68, 73, 73, 73, 73, 73, 78, 78, 78, 78, 78, 78,
83, 83, 83, 83, 83, 103, 103, 103 };
int valoriJLiteran[150] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 19, 19, 19, 19, 20, 142, 142, 142, 142, 142, 142,
142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
142, 142, 36, 36, 36, 36, 36, 14, 14, 14, 14, 14, 14,
0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 5, 5,
5, 5, 5, 5, 5, 5, 5, 5, 5, 11, 11, 11, 11,
11, 11, 11, 11, 11, 11, 12, 28, 28, 28, 28, 28, 28,
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 142, 142,
142, 142, 142, 142, 142, 142, 142, 142, 142, 136, 136, 136, 136,
136, 136, 125, 125, 125, 125, 125, 20, 19, 19, 19, 19, 19,
3, 3, 3, 3, 3, 3, 3, 3 }; 


//o)
int arieLiterao = 9687;
float medieIJLiterao = 64.580002;
int valoriILiterao[150] = { 
	25, 25, 25, 25, 25, 25, 25, 25, 25, 24, 24, 24,
24, 39, 38, 38, 38, 38, 38, 50, 50, 50, 50, 50, 62,
62, 62, 62, 62, 53, 50, 50, 50, 50, 51, 63, 63, 63,
63, 63, 72, 72, 72, 72, 72, 74, 79, 79, 79, 79, 79,
79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 88, 88,
88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88,
88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88,
88, 88, 88, 88, 88, 88, 88, 88, 88, 79, 79, 79, 79,
79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 64,
63, 63, 63, 63, 63, 57, 57, 57, 57, 57, 56, 56, 56,
56, 56, 50, 50, 50, 50, 50, 50, 38, 38, 38, 38, 38,
24, 24, 24, 24, 24, 62, 62, 62 };
int valoriJLiterao[150] = { 
	37, 37, 37, 37, 37, 37, 37, 37, 37, 69, 69, 69,
69, 69, 70, 71, 86, 86, 86, 86, 86, 86, 107, 107, 107,
107, 107, 107, 118, 118, 118, 118, 118, 118, 129, 129, 129, 129,
129, 129, 129, 129, 129, 129, 129, 129, 129, 41, 41, 40, 40,
40, 40, 14, 13, 13, 13, 13, 13, 4, 3, 3, 3, 3,
3, 3, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
11, 3, 3, 3, 3, 3, 3, 13, 13, 13, 13, 13, 13,
45, 45, 45, 45, 45, 46, 129, 129, 129, 129, 129, 129, 129,
129, 129, 129, 129, 129, 129, 118, 118, 118, 118, 118, 118, 107,
107, 107, 107, 107, 107, 92, 91, 91, 91, 91, 91, 91, 75,
75, 75, 75, 75, 75, 75, 75, 75 }; 


//p)
int arieLiterap = 8689;
float medieIJLiterap = 57.926666;
int valoriILiterap[150] = { 
16, 16, 16, 16, 16, 17, 81, 81, 81, 66, 64, 64,
64, 64, 64, 64, 64, 76, 76, 76, 76, 69, 69, 69, 69,
69, 69, 69, 77, 77, 77, 77, 72, 72, 72, 72, 72, 72,
72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72,
72, 72, 72, 72, 69, 69, 69, 69, 69, 69, 69, 64, 64,
64, 64, 64, 64, 64, 64, 59, 59, 59, 59, 59, 59, 59,
48, 47, 47, 47, 37, 37, 37, 37, 37, 37, 37, 37, 37,
37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
37, 37, 37, 37, 37, 37, 49, 49 };
int valoriJLiterap[150] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 5, 5, 5, 5, 5, 6, 144, 144, 144, 144, 144, 144,
144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
144, 144, 144, 144, 144, 10, 10, 10, 10, 10, 10, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3,
3, 3, 3, 4, 13, 13, 13, 13, 13, 21, 21, 21, 21,
21, 29, 28, 28, 28, 28, 28, 48, 48, 48, 48, 48, 97,
97, 97, 97, 97, 97, 90, 90, 90, 90, 90, 83, 83, 83,
83, 83, 75, 75, 75, 75, 75, 75, 67, 67, 67, 67, 67,
53, 53, 53, 53, 53, 53, 53, 53 };


//q)
int arieLiteraq = 8927;
float medieIJLiteraq = 59.513332;
int valoriILiteraq[150] = { 
23, 23, 23, 23, 23, 23, 33, 33, 33, 46, 45, 45,
45, 66, 66, 66, 66, 67, 67, 67, 67, 62, 62, 62, 67,
67, 67, 67, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73,
73, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
75, 75, 75, 75, 75, 75, 75, 75, 75, 81, 81, 81, 81,
81, 81, 81, 81, 73, 73, 73, 73, 73, 73, 73, 72, 72,
72, 72, 72, 72, 72, 74, 67, 67, 67, 84, 83, 83, 83,
50, 50, 50, 50, 39, 39, 39, 39, 39, 39, 39, 39, 39,
39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
39, 39, 39, 39, 39, 39, 50, 50 };
int valoriJLiteraq[150] = { 
42, 42, 42, 42, 42, 42, 42, 42, 60, 60, 60, 60,
60, 60, 68, 68, 68, 68, 68, 79, 79, 79, 79, 79, 79,
86, 86, 86, 86, 86, 87, 90, 90, 90, 90, 90, 60, 60,
60, 60, 60, 60, 30, 30, 30, 30, 30, 19, 18, 18, 18,
18, 18, 11, 11, 11, 11, 11, 10, 10, 10, 10, 10, 10,
10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 6, 6,
6, 6, 6, 6, 0, 0, 0, 0, 0, 3, 3, 3, 3,
3, 5, 14, 14, 14, 14, 14, 141, 141, 141, 141, 141, 141,
137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
137, 137, 137, 141, 141, 141, 141, 141, 141, 144, 144, 144, 144,
144, 144, 144, 144, 144, 144, 144, 2, 2, 2, 2, 2, 2,
0, 0, 0, 0, 0, 0, 0, 0 }; 


//r)
int arieLiterar = 7634;
float medieIJLiterar = 50.893333;
int valoriILiterar[150] = {
7, 7, 7, 7, 7, 7, 7, 7, 83, 82, 82, 82,
82, 82, 96, 96, 96, 96, 97, 98, 97, 97, 97, 97, 97,
75, 75, 75, 75, 75, 75, 68, 68, 68, 68, 68, 50, 50,
50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43,
43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43,
43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43,
43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43,
43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43,
43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43,
57, 57, 57, 57, 57, 64, 64, 64 };
int valoriJLiterar[150] = {
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 1, 19, 19, 19, 19, 19, 19, 20,
142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
142, 142, 142, 142, 30, 30, 30, 30, 30, 30, 30, 3, 3,
3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6,
7, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
11, 11, 23, 23, 23, 23, 23, 23, 23, 28, 28, 28, 28,
28, 28, 28, 42, 42, 42, 42, 42, 42, 42, 28, 28, 28,
28, 28, 28, 28, 28, 28, 28, 28 }; 


//s)
int arieLiteras = 9147;
float medieIJLiteras = 60.980000;
int valoriILiteras[150] = { 
	18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19,
19, 47, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 36,
36, 36, 36, 36, 43, 40, 40, 40, 40, 40, 49, 49, 49,
49, 49, 57, 57, 57, 57, 57, 60, 66, 66, 66, 66, 66,
75, 75, 75, 75, 75, 93, 93, 93, 93, 93, 94, 88, 88,
89, 89, 89, 97, 97, 97, 97, 97, 106, 106, 106, 106, 106,
106, 106, 106, 106, 106, 106, 89, 89, 89, 88, 88, 94, 93,
93, 93, 93, 93, 84, 84, 84, 84, 84, 66, 66, 66, 66,
66, 60, 57, 57, 57, 57, 57, 53, 53, 53, 53, 53, 44,
44, 44, 44, 45, 47, 53, 53, 53, 53, 53, 40, 40, 40,
40, 40, 49, 49, 49, 49, 49, 50, 49, 49, 49, 49, 49,
32, 32, 32, 31, 31, 83, 83, 83 };
int valoriJLiteras[150] = { 
73, 73, 73, 73, 64, 63, 63, 62, 62, 62, 62, 62,
62, 64, 64, 64, 64, 64, 64, 64, 64, 64, 71, 70, 70,
70, 70, 70, 70, 70, 70, 75, 75, 75, 75, 75, 75, 75,
75, 75, 54, 53, 53, 53, 53, 53, 53, 53, 59, 51, 51,
51, 51, 51, 51, 51, 52, 60, 60, 60, 59, 59, 59, 59,
59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 46, 46,
46, 46, 46, 46, 46, 46, 46, 51, 51, 51, 51, 51, 51,
52, 52, 52, 52, 51, 51, 51, 51, 51, 51, 51, 62, 56,
56, 56, 56, 56, 56, 56, 57, 84, 84, 84, 84, 84, 84,
84, 84, 84, 81, 81, 81, 81, 81, 81, 81, 81, 81, 75,
75, 75, 75, 75, 75, 76, 76, 76, 38, 38, 38, 38, 38,
38, 38, 38, 38, 38, 38, 38, 38 }; 


//t)
int arieLiterat = 8550;
float medieIJLiterat = 57.000000;
int valoriILiterat[150] = { 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9,
9, 9, 18, 18, 18, 18, 18, 18, 18, 18, 28, 28, 28,
28, 37, 37, 37, 37, 46, 46, 46, 47, 56, 56, 56, 56,
61, 65, 65, 66, 68, 127, 127, 127, 127, 136, 136, 136, 136,
66, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65,
65, 65, 65, 65, 65, 65, 65, 65, 61, 56, 56, 56, 56,
56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
56, 56, 56, 56, 56, 56, 57, 71, 71, 71, 71, 85, 84,
84, 84, 66, 66, 66, 66, 66, 66 };
int valoriJLiterat[150] = { 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 8,
8, 8, 8, 8, 8, 8, 8, 9, 72, 72, 72, 72, 74,
74, 74, 74, 74, 106, 106, 106, 106, 106, 106, 106, 106, 106,
108, 114, 114, 114, 114, 114, 114, 114, 114, 114, 124, 124, 124,
124, 124, 124, 124, 124, 124, 128, 128, 128, 128, 128, 128, 128,
128, 128, 128, 136, 136, 136, 136, 136, 136, 136, 136, 136, 140,
140, 140, 140, 140, 140, 140, 140, 140, 26, 23, 22, 22, 22,
22, 22, 22, 22, 22, 18, 18, 18, 18, 18, 18, 18, 18,
18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 12, 12,
12, 12, 12, 12, 12, 12, 12, 8, 8, 8, 8, 8, 8,
8, 8, 8, 12, 12, 12, 12, 12 }; 


//u)
int arieLiterau = 11473;
float medieIJLiterau = 76.486664;
int valoriILiterau[150] = { 
109, 109, 109, 84, 84, 84, 84, 84, 79, 78, 78, 78,
78, 78, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73,
73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73,
73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73,
73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73,
73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73,
73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73,
73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73,
73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73,
73, 73, 73, 79, 79, 79, 79, 79, 79, 89, 89, 89, 89,
89, 90, 72, 72, 72, 72, 72, 90, 89, 89, 89, 89, 89,
86, 86, 86, 86, 86, 86, 86, 86 };
int valoriJLiterau[150] = {
3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
3, 3, 14, 14, 14, 14, 14, 131, 131, 131, 131, 131, 131,
136, 136, 136, 136, 136, 137, 142, 142, 142, 142, 142, 150, 150,
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
150, 150, 25, 25, 25, 25, 25, 14, 14, 14, 14, 14, 14,
14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 6, 6,
6, 6, 6, 6, 0, 0, 0, 0, 0, 3, 3, 3, 3,
3, 4, 9, 9, 9, 9, 9, 20, 20, 20, 20, 20, 21,
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
8, 8, 8, 8, 8, 8, 8, 8 }; 


//v)
int arieLiterav = 5488;
float medieIJLiterav = 36.586666;
int valoriILiterav[150] = { 
105, 105, 105, 73, 73, 73, 73, 73, 56, 55, 55, 55,
55, 55, 50, 50, 50, 50, 50, 46, 45, 45, 45, 45, 45,
39, 39, 39, 39, 39, 40, 39, 39, 39, 39, 39, 34, 33,
33, 33, 33, 33, 34, 33, 33, 33, 33, 38, 38, 38, 38,
38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39, 39,
33, 33, 33, 33, 33, 40, 39, 39, 39, 39, 39, 34, 34,
34, 34, 34, 36, 39, 39, 39, 39, 39, 39, 39, 39, 39,
39, 39, 33, 33, 33, 33, 33, 44, 44, 44, 44, 44, 44,
39, 39, 39, 39, 39, 34, 34, 34, 34, 34, 34, 28, 28,
28, 28, 28, 28, 28, 28, 28, 28, 28, 22, 22, 22, 22,
22, 22, 17, 17, 17, 17, 17, 12, 12, 12, 12, 12, 12,
6, 6, 6, 6, 6, 6, 6, 6 };
int valoriJLiterav[150] = { 
3, 3, 3, 3, 3, 3, 3, 3, 8, 8, 8, 8,
8, 8, 14, 14, 14, 14, 14, 25, 25, 25, 25, 25, 25,
36, 36, 36, 36, 36, 37, 53, 53, 53, 53, 53, 64, 64,
64, 64, 64, 64, 75, 75, 75, 75, 75, 92, 92, 92, 92,
92, 92, 103, 103, 103, 103, 103, 93, 91, 91, 91, 91, 91,
87, 87, 87, 87, 87, 85, 84, 84, 84, 84, 84, 81, 81,
81, 81, 81, 81, 56, 55, 55, 55, 55, 28, 28, 28, 28,
28, 28, 11, 11, 11, 11, 11, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 8, 8,
8, 8, 8, 4, 3, 3, 3, 3, 3, 31, 31, 31, 31,
31, 31, 20, 19, 19, 19, 19, 8, 8, 8, 8, 8, 8,
3, 3, 3, 3, 3, 3, 3, 3 }; 


//w)
int arieLiteraw = 6928;
float medieIJLiteraw = 46.186668;
int valoriILiteraw[150] = { 
116, 116, 116, 77, 77, 77, 77, 77, 61, 61, 61, 61,
61, 61, 53, 53, 53, 53, 53, 53, 52, 52, 52, 52, 52,
44, 44, 44, 44, 44, 46, 52, 52, 52, 52, 52, 56, 56,
56, 56, 56, 56, 44, 44, 44, 44, 44, 56, 56, 56, 56,
56, 56, 52, 52, 52, 52, 52, 46, 46, 46, 46, 46, 46,
57, 57, 57, 57, 57, 48, 46, 46, 46, 46, 46, 46, 46,
46, 46, 46, 48, 56, 56, 56, 56, 56, 44, 44, 44, 44,
44, 46, 60, 60, 60, 60, 60, 52, 52, 52, 52, 52, 52,
44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 30, 30,
30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
30, 30, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
16, 16, 16, 16, 16, 16, 16, 16 };
int valoriJLiteraw[150] = { 3, 3, 3, 3, 3, 3, 8, 8, 8, 14, 14, 14,
14, 25, 25, 25, 25, 42, 42, 42, 42, 58, 58, 58, 69,
69, 69, 70, 86, 86, 86, 86, 103, 103, 103, 103, 103, 103,
103, 98, 98, 98, 98, 100, 100, 100, 100, 86, 86, 86, 86,
50, 50, 50, 23, 22, 22, 22, 5, 5, 5, 5, 8, 8,
8, 9, 13, 13, 13, 20, 20, 20, 20, 31, 31, 31, 31,
42, 42, 42, 42, 58, 58, 58, 69, 69, 69, 70, 86, 86,
86, 86, 103, 103, 103, 103, 114, 114, 114, 104, 103, 103, 103,
106, 106, 106, 106, 86, 86, 86, 86, 50, 50, 50, 23, 22,
22, 22, 5, 5, 5, 5, 0, 0, 0, 1, 3, 3, 3,
9, 9, 9, 9, 13, 13, 13, 14, 20, 19, 19, 19, 8,
8, 8, 3, 3, 3, 3, 3, 3 }; 


//x)
int arieLiterax = 7017;
float medieIJLiterax = 46.779999;
int valoriILiterax[150] = { 
132, 132, 132, 84, 84, 84, 84, 84, 84, 48, 48, 48,
48, 48, 43, 42, 42, 42, 42, 42, 48, 48, 48, 48, 48,
48, 36, 36, 36, 36, 36, 36, 42, 42, 42, 42, 42, 42,
36, 36, 36, 36, 36, 42, 42, 42, 42, 42, 42, 36, 36,
36, 36, 36, 36, 48, 48, 48, 48, 48, 48, 42, 42, 42,
42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
42, 42, 42, 42, 42, 48, 48, 48, 48, 48, 48, 36, 36,
36, 36, 36, 36, 42, 42, 42, 42, 42, 42, 36, 36, 36,
36, 36, 42, 42, 42, 42, 42, 42, 36, 36, 36, 36, 36,
36, 42, 42, 42, 42, 42, 44, 54, 54, 54, 54, 54, 60,
60, 60, 60, 60, 60, 72, 72, 72 };
int valoriJLiterax[150] = {
3, 3, 3, 3, 3, 3, 3, 3, 3, 9, 9, 9,
9, 9, 9, 9, 9, 9, 9, 9, 9, 23, 23, 23, 23,
23, 23, 35, 35, 35, 35, 35, 35, 52, 52, 52, 52, 52,
53, 49, 49, 49, 49, 49, 49, 61, 61, 61, 61, 61, 61,
72, 72, 72, 72, 72, 72, 84, 84, 84, 84, 84, 84, 90,
90, 90, 90, 90, 90, 72, 72, 72, 72, 72, 72, 73, 73,
73, 73, 73, 73, 69, 69, 69, 69, 69, 69, 95, 95, 95,
95, 95, 95, 78, 78, 78, 78, 78, 78, 69, 69, 69, 69,
69, 69, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
58, 47, 46, 46, 46, 46, 46, 29, 29, 29, 29, 29, 29,
24, 23, 23, 23, 23, 23, 6, 6, 6, 6, 6, 6, 3,
3, 3, 3, 3, 3, 3, 3, 3 }; 


//y)
int arieLiteray = 4655;
float medieIJLiteray = 31.033333;
int valoriILiteray[150] = { 
111, 111, 79, 79, 79, 79, 55, 55, 55, 55, 50, 50,
50, 46, 45, 45, 45, 39, 39, 39, 39, 39, 39, 39, 39,
34, 33, 33, 33, 44, 44, 44, 44, 33, 33, 33, 33, 33,
33, 33, 39, 39, 39, 39, 33, 33, 33, 33, 39, 39, 39,
39, 34, 34, 34, 34, 39, 39, 39, 39, 38, 38, 38, 40,
39, 39, 39, 45, 45, 45, 45, 39, 39, 39, 39, 39, 39,
39, 39, 33, 33, 33, 33, 28, 28, 28, 28, 23, 23, 23,
17, 17, 17, 17, 11, 11, 11, 11, 11, 11, 11, 11, 6,
6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 1, 0, 0,
0, 0, 0, 0, 0, 1, 0, 0, 0, 12, 12, 12, 12,
22, 22, 22, 22, 28, 28, 28, 28, 28, 28, 28, 28, 28,
28, 28, 39, 39, 39, 39, 39, 39 };
int valoriJLiteray[150] = { 
111, 111, 79, 79, 79, 79, 55, 55, 55, 55, 50, 50,
50, 46, 45, 45, 45, 39, 39, 39, 39, 39, 39, 39, 39,
34, 33, 33, 33, 44, 44, 44, 44, 33, 33, 33, 33, 33,
33, 33, 39, 39, 39, 39, 33, 33, 33, 33, 39, 39, 39,
39, 34, 34, 34, 34, 39, 39, 39, 39, 38, 38, 38, 40,
39, 39, 39, 45, 45, 45, 45, 39, 39, 39, 39, 39, 39,
39, 39, 33, 33, 33, 33, 28, 28, 28, 28, 23, 23, 23,
17, 17, 17, 17, 11, 11, 11, 11, 11, 11, 11, 11, 6,
6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 1, 0, 0,
0, 0, 0, 0, 0, 1, 0, 0, 0, 12, 12, 12, 12,
22, 22, 22, 22, 28, 28, 28, 28, 28, 28, 28, 28, 28,
28, 28, 39, 39, 39, 39, 39, 39 };


//z)
int arieLiteraz = 8715;
float medieIJLiteraz = 58.099998;
int valoriILiteraz[150] = { 
134, 134, 134, 134, 134, 134, 134, 134, 134, 69, 68, 68,
68, 68, 54, 52, 52, 52, 52, 53, 53, 52, 52, 52, 52,
52, 46, 46, 46, 46, 46, 46, 45, 45, 45, 45, 45, 45,
45, 45, 46, 46, 46, 46, 46, 46, 46, 46, 46, 53, 53,
53, 53, 53, 53, 46, 46, 46, 46, 46, 46, 46, 46, 46,
46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
46, 52, 52, 52, 52, 52, 52, 46, 46, 46, 46, 46, 47,
46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46,
46, 46, 46, 46, 53, 53, 53, 53, 53, 53, 46, 46, 46,
46, 46, 49, 49, 49, 49, 48, 48, 48, 48, 48, 48, 48,
49, 56, 56, 56, 56, 56, 58, 68, 68, 68, 68, 68, 81,
81, 81, 81, 81, 81, 150, 150, 150 };
int valoriJLiteraz[150] = { 
3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 14, 14,
14, 14, 14, 15, 41, 40, 40, 40, 40, 40, 40, 47, 46,
46, 46, 46, 46, 52, 52, 52, 52, 52, 52, 52, 58, 58,
58, 58, 58, 58, 70, 70, 70, 70, 70, 70, 70, 81, 81,
81, 81, 81, 81, 87, 87, 87, 87, 87, 87, 87, 81, 81,
81, 81, 81, 81, 85, 81, 81, 81, 81, 81, 81, 82, 82,
82, 82, 82, 82, 85, 81, 81, 81, 81, 81, 81, 82, 81,
81, 81, 81, 81, 83, 87, 87, 87, 87, 87, 87, 75, 75,
75, 75, 75, 75, 75, 64, 64, 64, 64, 64, 64, 58, 58,
58, 58, 58, 58, 58, 52, 52, 52, 52, 52, 52, 41, 41,
41, 41, 41, 41, 41, 40, 40, 40, 40, 40, 41, 35, 34,
34, 34, 34, 34, 35, 46, 46, 46 }; 




//Pentru puncte logica speciala:

//Punct I)
int arieLiterapi = 17365;
float medieIJLiterapi = 115.766670;
int valoriILiterapi[150] = { 
	43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43,
	43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 
	43, 43, 43, 43, 43, 43, 44, 45, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 119, 
	130, 150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 119, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118 };
int valoriJLiterapi[150] = { 
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 64, 64, 65, 65, 65, 65,
	65, 65, 65, 65, 65, 65, 65, 67, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 120, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 119, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118 };







//Punct J)
int arieLiterapj = 17356;
float medieIJLiterapj = 115.706665;
int valoriILiterapj[150] = { 
	42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
	42, 42, 42, 42, 42, 42, 42, 44, 44, 44, 44, 44, 44,
	44, 44, 44, 44, 44, 46, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 119, 130, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 119, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118 };
int valoriJLiterapj[150] = { 
	64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
	64, 64, 64, 64, 64, 64, 65, 65, 65, 65, 65, 65, 65, 65, 
	65, 65, 65, 67, 118, 118, 118, 118, 118, 118, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 
	119, 130, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 130, 119, 118, 118, 
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118,
	118, 118 };








//LITERELE MARI: 


//Literele mari finale:
int litereMariArie[26];
float litereMariMedie[26];
int litereMariI[26][150];
int litereMariJ[26][150];


//A)
int arieLiteraA = 4390;
float medieIJLiteraA = 29.266666;
int valoriILiteraA[150] = { 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8,
8, 8, 8, 8, 8, 15, 15, 15, 15, 15, 15, 15, 15,
22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 24, 30,
30, 30, 30, 30, 30, 30, 38, 38, 38, 38, 30, 30, 30,
30, 34, 34, 34, 34, 30, 30, 30, 30, 26, 26, 26, 30,
30, 30, 30, 30, 30, 30, 30, 34, 34, 34, 34, 30, 30,
30, 30, 34, 34, 34, 34, 30, 30, 30, 31, 31, 31, 31,
31, 30, 30, 30, 30, 30, 30, 30, 33, 33, 33, 33, 33,
33, 33, 33, 90, 90, 90, 90, 30, 30, 30, 34, 34, 34,
34, 31, 30, 30, 30, 30, 30, 30, 30, 34, 34, 34, 34,
30, 30, 30, 31, 33, 33, 33, 33, 33, 33, 33, 41, 41,
41, 41, 45, 45, 45, 45, 61, 61 };
int valoriJLiteraA[150] = { 
	0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2,
2, 6, 6, 6, 6, 10, 10, 10, 10, 17, 17, 17, 6,
6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 12, 12,
12, 8, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8,
4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 15, 15,
15, 16, 31, 31, 31, 47, 47, 47, 47, 65, 65, 65, 65,
73, 73, 73, 73, 74, 74, 74, 77, 77, 77, 77, 74, 73,
73, 73, 73, 73, 73, 74, 73, 73, 73, 72, 72, 72, 72,
79, 79, 79, 79, 71, 71, 71, 71, 60, 60, 60, 52, 52,
52, 52, 44, 44, 44, 44, 33, 33, 33, 33, 25, 25, 25,
18, 17, 17, 17, 10, 10, 10, 10, 2, 2, 2, 2, 0,
0, 0, 0, 0, 0, 0, 0, 0 };




//B)
int arieLiteraB = 9890;
// D :(
float medieIJLiteraB = 65.933334;
int valoriILiteraB[150] = { 
95, 95, 80, 80, 80, 80, 62, 62, 62, 62, 62, 62,
62, 62, 67, 67, 67, 67, 62, 62, 62, 62, 62, 62, 62,
62, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 62, 62,
62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 58, 58, 58,
58, 53, 53, 53, 53, 53, 53, 53, 53, 84, 84, 84, 84,
54, 54, 54, 54, 58, 58, 58, 58, 62, 62, 62, 62, 66,
66, 66, 67, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
69, 69, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
64, 64, 64, 64, 69, 69, 69, 69, 69, 69, 69, 69, 69,
69, 69, 69, 67, 66, 66, 66, 66, 66, 66, 66, 67, 67,
67, 67, 70, 70, 70, 70, 106, 106 };
int valoriJLiteraB[150] = { 
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
2, 2, 2, 8, 8, 8, 8, 8, 16, 16, 16, 16, 150,
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
150, 150, 150, 150, 20, 20, 20, 20, 20, 16, 16, 16, 16,
12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
12, 12, 12, 12, 12, 12, 12, 12, 12, 16, 16, 16, 16,
24, 24, 24, 24, 24, 30, 30, 30, 30, 46, 46, 46, 46,
46, 62, 62, 62, 62, 97, 97, 97, 97, 121, 117, 117, 117,
117, 124, 124, 124, 124, 118, 118, 118, 118, 118, 106, 106, 106,
106, 102, 102, 102, 102, 102, 86, 86, 86, 86, 70, 70, 70,
70, 41, 39, 39, 39, 39, 39, 39 };



//C)
int arieLiteraC = 4744;
float medieIJLiteraC = 31.626667;
int valoriILiteraC[150] = { 
17, 17, 17, 17, 17, 17, 17, 17, 17, 19, 19, 19,
19, 40, 40, 40, 40, 35, 35, 35, 36, 35, 35, 35, 31,
31, 31, 31, 35, 35, 35, 35, 27, 27, 27, 27, 31, 31,
31, 29, 29, 29, 29, 29, 29, 29, 29, 34, 34, 34, 34,
34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
34, 34, 34, 34, 34, 34, 34, 34, 34, 40, 40, 40, 40,
40, 40, 40, 40, 40, 40, 40, 34, 34, 34, 34, 34, 34,
34, 34, 34, 34, 34, 34, 34, 34, 34, 38, 38, 38, 38,
34, 34, 34, 34, 34, 34, 34, 34, 29, 29, 29, 33, 33,
33, 33, 29, 29, 29, 29, 29, 29, 29, 29, 31, 31, 31,
35, 35, 35, 35, 29, 29, 29, 29, 20, 20, 20, 21, 21,
21, 21, 21, 21, 21, 21, 63, 63 };
int valoriJLiteraC[150] = { 
11, 11, 11, 11, 11, 11, 49, 49, 49, 49, 64, 64,
64, 64, 64, 79, 79, 79, 79, 90, 90, 90, 90, 101, 101,
101, 101, 109, 109, 109, 109, 116, 116, 116, 116, 116, 116, 116,
116, 117, 79, 79, 79, 79, 53, 53, 53, 53, 37, 37, 37,
37, 30, 30, 30, 30, 25, 25, 25, 25, 21, 20, 20, 20,
20, 16, 16, 16, 16, 9, 9, 9, 9, 9, 9, 9, 9,
2, 2, 2, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8,
8, 8, 8, 8, 8, 8, 8, 8, 2, 2, 2, 2, 2,
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 4, 4, 4, 4, 8, 8, 8, 8, 8, 15, 15,
15, 15, 23, 23, 23, 23, 37, 37 };



//D)
int arieLiteraD = 9317;
float medieIJLiteraD = 62.113335;
int valoriILiteraD[150] = { 
	83, 83, 65, 65, 65, 65, 53, 53, 53, 54, 54, 54,
54, 54, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58,
58, 62, 62, 62, 62, 62, 62, 62, 62, 66, 66, 66, 66,
61, 61, 61, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
67, 67, 67, 67, 67, 67, 64, 63, 63, 63, 63, 63, 63,
63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 64, 67, 67,
67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 61, 61, 61,
66, 66, 66, 66, 62, 62, 62, 62, 58, 58, 58, 58, 58,
58, 58, 58, 58, 58, 58, 58, 54, 54, 54, 54, 50, 50,
50, 50, 49, 49, 49, 49, 85, 85
};
int valoriJLiteraD[150] = { 
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
2, 2, 2, 2, 2, 2, 8, 8, 8, 8, 150, 150, 150,
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
150, 150, 150, 150, 12, 12, 12, 12, 8, 8, 8, 8, 8,
8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
8, 8, 8, 8, 8, 8, 2, 2, 2, 2, 6, 6, 6,
6, 10, 10, 10, 10, 14, 14, 14, 14, 22, 22, 22, 22,
28, 28, 28, 28, 37, 36, 36, 36, 56, 56, 56, 56, 56,
82, 82, 82, 84, 126, 126, 126, 126, 118, 118, 118, 118, 110,
110, 110, 110, 102, 102, 102, 102, 94, 94, 94, 94, 86, 86,
86, 86, 72, 72, 72, 72, 72, 72 };



//E)
int arieLiteraE = 7324;
float medieIJLiteraE = 48.826668;
int valoriILiteraE[150] = { 
143, 143, 127, 127, 127, 127, 68, 68, 68, 68, 54, 54,
54, 54, 50, 49, 49, 49, 45, 45, 45, 45, 40, 40, 40,
40, 40, 40, 40, 40, 40, 40, 40, 40, 36, 36, 36, 36,
36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
36, 36, 36, 36, 36, 36, 40, 40, 40, 40, 40, 40, 40,
40, 45, 45, 45, 45, 49, 49, 49, 49, 77, 77, 77, 77,
49, 49, 49, 49, 45, 45, 45, 45, 40, 40, 40, 40, 40,
40, 40, 40, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
36, 36, 36, 36, 38, 38, 38, 38, 38, 38, 38, 38, 43,
43, 43, 43, 47, 47, 47, 47, 52, 52, 52, 52, 56, 56,
56, 57, 80, 80, 80, 80, 134, 134 };
int valoriJLiteraE[150] = { 
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
2, 2, 2, 2, 8, 8, 8, 8, 16, 16, 16, 16, 16,
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 16, 16, 16,
16, 16, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 20,
20, 20, 20, 28, 28, 28, 28, 28, 44, 44, 44, 44, 8,
8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
16, 16, 16, 16, 16, 16, 16, 16, 16, 20, 20, 20, 20,
22, 28, 28, 28, 28, 36, 36, 36, 36, 36, 52, 52, 52,
52, 22, 22, 22, 22, 22, 30, 30 };



//F)
int arieLiteraF = 7068;
float medieIJLiteraF = 47.119999;
int valoriILiteraF[150] = { 
150, 150, 129, 129, 129, 129, 68, 68, 68, 68, 54, 54,
54, 54, 45, 45, 45, 45, 45, 45, 45, 45, 40, 40, 40,
40, 40, 40, 40, 40, 38, 38, 38, 38, 38, 38, 38, 38,
38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
38, 38, 38, 38, 38, 38, 43, 43, 43, 43, 43, 43, 43,
43, 48, 48, 48, 48, 57, 57, 57, 57, 85, 85, 85, 85,
57, 57, 57, 57, 48, 48, 48, 48, 43, 43, 43, 43, 38,
38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
38, 38, 42, 42, 42, 42, 52, 52 };
int valoriJLiteraF[150] = { 
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
2, 2, 2, 2, 2, 2, 2, 2, 2, 8, 8, 8, 8,
8, 16, 16, 16, 16, 150, 150, 150, 150, 150, 150, 150, 150,
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
150, 150, 150, 150, 12, 12, 12, 12, 12, 10, 10, 10, 10,
10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
10, 10, 10, 10, 10, 10, 18, 18, 18, 18, 18, 18, 18,
18, 18, 26, 26, 26, 26, 26, 38, 38, 38, 38, 38, 6,
6, 6, 6, 6, 6, 6, 6, 6, 10, 10, 10, 10, 10,
10, 10, 10, 10, 10, 14, 14, 14, 14, 14, 14, 14, 14,
14, 22, 22, 22, 22, 22, 30, 30 };



//G)
int arieLiteraG = 5942;
float medieIJLiteraG = 39.613335;
int valoriILiteraG[150] = { 
22, 22, 22, 22, 22, 23, 14, 14, 14, 25, 25, 25,
26, 40, 40, 40, 40, 36, 36, 36, 36, 33, 33, 33, 33,
33, 33, 33, 29, 29, 29, 29, 33, 33, 33, 33, 28, 28,
28, 28, 28, 28, 28, 29, 29, 29, 29, 26, 26, 26, 26,
30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 35, 35,
35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
35, 35, 75, 75, 75, 75, 63, 63, 63, 59, 59, 59, 59,
59, 59, 59, 59, 55, 55, 55, 55, 58, 58, 58, 54, 54,
54, 54, 51, 51, 51, 51, 55, 55, 55, 55, 51, 51, 51,
51, 51, 51, 51, 47, 47, 47, 47, 47, 47, 47, 47, 37,
37, 37, 29, 29, 29, 29, 66, 66 };
int valoriJLiteraG[150] = { 
34, 34, 34, 34, 34, 56, 56, 56, 56, 71, 71, 71,
71, 82, 82, 82, 94, 94, 94, 94, 101, 101, 101, 101, 109,
109, 109, 112, 112, 112, 112, 120, 120, 120, 120, 64, 64, 64,
42, 42, 42, 42, 34, 34, 34, 34, 23, 23, 23, 21, 21,
21, 21, 16, 16, 16, 16, 9, 9, 9, 9, 9, 9, 9,
2, 2, 2, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8,
8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 13, 13,
13, 13, 13, 13, 13, 62, 62, 62, 62, 62, 62, 62, 56,
56, 56, 56, 60, 60, 60, 60, 63, 63, 63, 67, 67, 67,
67, 72, 72, 72, 73, 83, 83, 83, 4, 4, 4, 4, 0,
0, 0, 0, 0, 0, 0, 0, 0 };



//H)
int arieLiteraH = 8330;
float medieIJLiteraH = 55.533333;
int valoriILiteraH[150] = { 
136, 136, 79, 79, 79, 79, 64, 64, 64, 64, 64, 64,
64, 64, 54, 54, 54, 54, 50, 50, 50, 50, 50, 50, 50,
50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
50, 50, 50, 50, 50, 50, 50, 50, 50, 107, 107, 107, 107,
50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50,
50, 50, 50, 50, 50, 50, 50, 54, 54, 54, 54, 64, 64,
64, 64, 64, 64, 64, 64, 79, 79 };
int valoriJLiteraH[150] = {
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
2, 2, 2, 2, 8, 8, 8, 8, 24, 24, 24, 150, 150,
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 28, 28, 28,
28, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6,
6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4,
4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6,
6, 6, 6, 6, 6, 6, 6, 6, 12, 12, 12, 12, 28,
28, 28, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
150, 32, 32, 32, 32, 8, 8, 8, 8, 2, 2, 2, 2,
2, 2, 2, 2, 2, 2, 2, 2 };


//I)
int arieLiteraI = 9864;
float medieIJLiteraI = 65.760002;
int valoriILiteraI[150] = { 
	150, 150, 87, 87, 86, 86, 72, 72, 71, 71, 63, 63,
63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63,
63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 71, 71,
71, 71, 71, 71, 72, 72, 86, 86 };
int valoriJLiteraI[150] = { 
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 8, 8,
8, 8, 8, 8, 8, 20, 20, 20, 20, 20, 20, 20, 20,
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 12, 8,
8, 8, 8, 8, 8, 8, 2, 2, 2, 2, 2, 2, 2,
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
2, 2, 2, 2, 2, 2, 2, 2};


//J)
int arieLiteraJ = 7412;
float medieIJLiteraJ = 49.413334;
int valoriILiteraJ[150] = { 
103, 103, 62, 62, 62, 62, 50, 50, 50, 50, 44, 44,
44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44,
44, 44, 44, 44, 44, 44, 44, 44, 39, 38, 38, 38, 38,
38, 38, 38, 50, 50, 50, 50, 66, 66, 66, 72, 72, 72,
72, 80, 80, 80, 80, 80, 80, 80, 80, 66, 66, 66, 66,
61, 61, 61, 61, 50, 50, 50, 52, 50, 50, 50, 40, 40,
40, 40, 29, 28, 28, 28, 61, 61 };
int valoriJLiteraJ[150] = { 
8, 8, 8, 8, 8, 8, 8, 8, 23, 23, 23, 23,
23, 23, 30, 30, 30, 30, 30, 38, 38, 38, 38, 38, 38,
38, 38, 38, 38, 38, 39, 29, 29, 29, 29, 29, 14, 14,
14, 14, 14, 14, 2, 2, 2, 2, 2, 4, 4, 4, 4,
4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
4, 4, 4, 4, 4, 12, 12, 12, 12, 12, 12, 23, 23,
23, 23, 24, 24, 150, 150, 150, 150, 150, 150, 150, 150, 150,
150, 150, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144,
140, 140, 140, 140, 140, 137, 137, 137, 137, 137, 137, 129, 129,
129, 129, 129, 99, 98, 98, 98, 98, 98, 6, 6, 6, 6,
6, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
2, 2, 2, 2, 2, 2, 2, 2 };


//K)
int arieLiteraK = 7661;
float medieIJLiteraK = 51.073334;
int valoriILiteraK[150] = { 
111, 111, 66, 66, 66, 66, 50, 50, 50, 50, 42, 42,
42, 42, 39, 39, 39, 39, 32, 32, 32, 32, 31, 31, 31,
31, 32, 32, 32, 32, 31, 31, 31, 32, 28, 28, 28, 35,
32, 32, 32, 32, 31, 31, 31, 32, 32, 32, 32, 28, 28,
28, 28, 32, 32, 32, 31, 34, 34, 35, 35, 38, 38, 39,
39, 45, 45, 45, 46, 55, 55, 55, 55, 59, 59, 59, 60,
70, 70, 70, 70, 59, 59, 59, 60, 60, 59, 59, 59, 59,
59, 59, 59, 59, 59, 59, 60, 60, 60, 59, 59, 59, 59,
59, 60, 60, 60, 60, 60, 59, 59, 59, 59, 59, 59, 59,
60, 60, 60, 60, 59, 59, 59, 59, 60, 60, 60, 60, 63,
63, 63, 63, 59, 59, 59, 59, 60, 60, 60, 60, 63, 63,
63, 63, 71, 71, 71, 71, 87, 87 };
int valoriJLiteraK[150] = { 
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
2, 2, 2, 2, 8, 8, 8, 150, 150, 150, 150, 150, 150,
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
150, 150, 150, 150, 150, 150, 150, 150, 150, 20, 20, 20, 20,
12, 12, 12, 10, 10, 10, 10, 14, 14, 14, 18, 18, 18,
20, 24, 24, 24, 36, 36, 36, 40, 44, 44, 44, 52, 52,
52, 49, 44, 44, 44, 47, 47, 47, 48, 47, 47, 47, 47,
47, 47, 53, 51, 51, 51, 50, 50, 50, 56, 55, 55, 56,
55, 55, 55, 52, 51, 51, 51, 51, 51, 51, 56, 56, 56,
56, 48, 48, 48, 44, 44, 44, 44, 36, 36, 36, 24, 24,
24, 24, 16, 16, 16, 12, 12, 12, 12, 4, 4, 4, 4,
4, 4, 4, 0, 0, 0, 0, 0 };


//L)
int arieLiteraL = 6172;
float medieIJLiteraL = 41.146667;
int valoriILiteraL[150] = { 
	86, 86, 48, 48, 48, 48, 40, 40, 40, 40, 40, 40,
40, 40, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
38, 38, 38, 38, 38, 38, 38, 38, 43, 43, 43, 43, 43,
43, 43, 43, 47, 47, 47, 47, 51, 51, 51, 51, 60, 60,
60, 60, 69, 69, 69, 69, 130, 130 };
int valoriJLiteraL[150] = {
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
2, 2, 8, 8, 8, 8, 150, 150, 150, 150, 150, 150, 150, 
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 
150, 150, 150, 150, 150, 150, 150, 24, 24, 24, 24, 8, 8,
8, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 6, 6, 
6, 6, 6, 6, 6, 6, 6, 10, 10, 10, 10, 10, 14, 14, 14, 14, 
18, 18, 18, 18, 26, 26, 26, 26, 26, 34, 34 };


//M)
int arieLiteraM = 6603;
float medieIJLiteraM = 44.020000;
int valoriILiteraM[150] = { 
87, 87, 64, 64, 64, 64, 58, 58, 58, 58, 61, 61,
61, 61, 52, 52, 52, 52, 44, 43, 43, 43, 43, 43, 43,
43, 43, 43, 44, 44, 48, 48, 48, 48, 43, 43, 43, 43,
43, 43, 44, 43, 43, 43, 43, 43, 43, 43, 43, 46, 46,
46, 46, 43, 43, 43, 43, 46, 46, 46, 46, 43, 43, 43,
43, 43, 43, 43, 43, 46, 46, 46, 46, 43, 43, 43, 43,
43, 43, 43, 43, 43, 43, 43, 43, 40, 40, 40, 40, 46,
46, 46, 46, 43, 43, 43, 43, 44, 44, 44, 44, 44, 44,
44, 44, 46, 46, 46, 46, 43, 43, 43, 43, 40, 40, 40,
40, 40, 40, 40, 38, 38, 38, 38, 35, 35, 35, 35, 32,
32, 32, 32, 29, 29, 29, 29, 35, 35, 35, 35, 32, 32,
32, 32, 35, 35, 35, 35, 50, 50 };
int valoriJLiteraM[150] = { 
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4,
4, 8, 8, 8, 32, 32, 32, 24, 24, 24, 20, 20, 21,
22, 22, 34, 34, 34, 41, 41, 41, 49, 49, 49, 61, 61,
61, 69, 69, 69, 77, 77, 77, 71, 71, 71, 75, 75, 77,
75, 75, 72, 72, 72, 75, 75, 75, 75, 75, 75, 71, 71,
71, 73, 73, 73, 51, 51, 51, 31, 31, 31, 15, 15, 4,
4, 4, 0, 0, 0, 4, 4, 4, 0, 0, 0, 4, 4,
4, 0, 0, 0, 4, 4, 4, 0, 0, 1, 4, 4, 0,
0, 0, 4, 4, 4, 16, 16, 16, 28, 28, 28, 150, 150,
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
150, 150, 150, 150, 150, 24, 24, 24, 8, 8, 8, 2, 2,
2, 2, 2, 2, 2, 2, 2, 2};


//N)
int arieLiteraN = 5654;
float medieIJLiteraN = 37.693333;
int valoriILiteraN[150] = { 
90, 90, 55, 55, 55, 55, 43, 43, 43, 43, 47, 47,
47, 47, 39, 39, 39, 39, 39, 39, 39, 39, 43, 43, 43,
43, 39, 39, 39, 39, 43, 43, 43, 44, 44, 44, 44, 44,
40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 44, 44,
44, 44, 44, 44, 44, 44, 40, 40, 40, 40, 40, 40, 40,
40, 40, 40, 40, 40, 44, 44, 44, 44, 44, 44, 44, 44,
40, 40, 40, 40, 40, 40, 40, 40, 39, 39, 39, 40, 39,
39, 39, 40, 43, 43, 43, 43, 47, 47, 47, 47, 43, 43,
43, 43, 39, 39, 39, 39, 35, 35, 35, 35, 35, 35, 35,
32, 31, 31, 31, 28, 27, 27, 27, 24, 24, 24, 24, 20,
20, 20, 20, 20, 20, 20, 20, 16, 16, 16, 16, 12, 12,
12, 12, 16, 16, 16, 16, 24, 24 };
int valoriJLiteraN[150] = { 
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 6, 6,
6, 6, 8, 8, 8, 8, 20, 20, 20, 20, 150, 150, 150,
150, 32, 32, 32, 32, 28, 28, 28, 28, 34, 34, 34, 38,
38, 38, 38, 41, 41, 41, 41, 45, 45, 45, 45, 47, 47,
47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 43, 43, 43,
43, 47, 47, 47, 47, 47, 47, 47, 47, 48, 47, 47, 47,
44, 44, 44, 44, 44, 44, 44, 44, 48, 48, 48, 48, 48,
48, 48, 48, 44, 44, 44, 44, 44, 44, 44, 44, 47, 47,
47, 48, 47, 47, 47, 48, 45, 45, 45, 49, 45, 45, 45,
50, 49, 49, 49, 50, 49, 49, 49, 53, 53, 53, 53, 67,
67, 67, 67, 14, 14, 14, 14, 6, 6, 6, 6, 2, 2,
2, 2, 2, 2, 2, 2, 2, 2 };


//O)
int arieLiteraO = 7666;
float medieIJLiteraO = 51.106667;
int valoriILiteraO[150] = { 
22, 22, 22, 22, 22, 23, 30, 30, 30, 31, 30, 30,
30, 34, 34, 34, 34, 38, 38, 38, 38, 41, 41, 41, 44,
44, 44, 44, 49, 49, 49, 49, 49, 49, 49, 49, 53, 53,
53, 60, 60, 60, 60, 56, 56, 56, 56, 62, 62, 62, 62,
62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 68, 68,
68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
68, 68, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
59, 59, 59, 59, 56, 56, 56, 56, 56, 56, 56, 53, 53,
53, 53, 45, 45, 45, 45, 52, 52, 52, 52, 44, 44, 44,
42, 41, 41, 41, 38, 38, 38, 38, 30, 30, 30, 30, 26,
26, 26, 23, 22, 22, 22, 52, 52 };
int valoriJLiteraO[150] = { 
30, 30, 30, 30, 30, 30, 56, 56, 56, 72, 72, 72,
72, 82, 82, 82, 82, 98, 98, 98, 98, 105, 105, 105, 112,
112, 112, 112, 120, 120, 120, 120, 120, 120, 120, 120, 68, 68,
68, 42, 42, 42, 42, 30, 30, 30, 30, 18, 18, 18, 19,
16, 16, 16, 10, 9, 9, 9, 9, 9, 9, 9, 2, 2,
2, 3, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 2, 2,
2, 2, 9, 9, 9, 9, 9, 9, 9, 16, 16, 16, 16,
18, 18, 18, 18, 23, 23, 23, 23, 41, 41, 41, 60, 60,
60, 60, 124, 124, 124, 124, 120, 120, 120, 120, 112, 112, 112,
106, 105, 105, 105, 98, 98, 98, 98, 86, 86, 86, 86, 75,
75, 75, 60, 60, 60, 60, 60, 60};


//P)
int arieLiteraP = 7860;
float medieIJLiteraP = 52.400002;
int valoriILiteraP[150] = { 
94, 94, 77, 77, 77, 77, 64, 64, 63, 63, 62, 62,
62, 62, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
67, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
69, 69, 69, 69, 69, 69, 67, 67, 67, 67, 67, 67, 67,
67, 67, 67, 67, 67, 62, 62, 62, 62, 58, 58, 59, 59,
63, 63, 63, 63, 34, 34, 33, 33, 33, 33, 33, 33, 33,
33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33,
33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 38, 38,
38, 38, 43, 43, 43, 43, 53, 53 };
int valoriJLiteraP[150] = { 
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
2, 2, 2, 2, 2, 8, 8, 8, 8, 8, 16, 16, 16,
16, 16, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
150, 150, 150, 150, 150, 150, 150, 150, 150, 28, 20, 20, 20,
20, 12, 12, 12, 12, 12, 10, 10, 10, 10, 10, 10, 10,
10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
6, 6, 6, 6, 8, 8, 8, 8, 8, 16, 16, 16, 16,
16, 24, 24, 24, 24, 24, 40, 40, 40, 40, 40, 71, 71,
71, 71, 71, 63, 63, 63, 63, 63, 63, 63, 63, 63, 55,
55, 55, 55, 55, 55, 55, 55, 55, 55, 47, 47, 47, 47,
47, 31, 31, 31, 31, 31, 31, 31 };


//Q)
int arieLiteraQ = 6992;
float medieIJLiteraQ = 46.613335;
int valoriILiteraQ[150] = { 
18, 18, 18, 18, 18, 22, 22, 22, 27, 27, 27, 30,
30, 30, 38, 38, 38, 45, 45, 45, 44, 44, 44, 52, 52,
52, 52, 49, 49, 49, 53, 53, 53, 60, 60, 60, 57, 57,
57, 56, 56, 56, 62, 62, 62, 62, 62, 62, 68, 68, 68,
68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
68, 68, 68, 62, 62, 62, 62, 62, 62, 56, 56, 56, 57,
57, 57, 57, 57, 57, 53, 53, 53, 45, 45, 45, 46, 48,
48, 48, 40, 40, 40, 42, 42, 42, 30, 30, 30, 26, 26,
26, 23, 23, 23, 15, 15, 15, 30, 30, 30, 30, 30, 30,
30, 30, 30, 30, 30, 30, 30, 26, 26, 26, 26, 26, 26,
27, 27, 27, 26, 26, 26, 52, 52 };
int valoriJLiteraQ[150] = { 
32, 32, 32, 32, 32, 32, 50, 50, 50, 62, 62, 62,
62, 71, 71, 71, 71, 82, 82, 82, 82, 88, 88, 88, 94,
94, 94, 94, 97, 97, 97, 97, 100, 100, 100, 100, 50, 50,
50, 35, 34, 34, 34, 24, 24, 24, 24, 12, 12, 12, 12,
9, 9, 9, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7,
7, 7, 15, 15, 15, 18, 18, 18, 18, 21, 21, 21, 21,
24, 24, 24, 24, 24, 24, 24, 22, 22, 22, 22, 22, 22,
22, 22, 26, 26, 26, 26, 23, 23, 23, 20, 20, 20, 20,
20, 20, 20, 20, 32, 32, 32, 32, 36, 36, 36, 58, 58,
58, 58, 102, 102, 102, 102, 99, 99, 99, 99, 93, 93, 93,
87, 87, 87, 87, 81, 81, 81, 81, 70, 70, 70, 70, 61,
61, 61, 44, 44, 44, 44, 44, 44 };


//R)
int arieLiteraR = 8943;
float medieIJLiteraR = 59.619999;
int valoriILiteraR[150] = { 
84, 84, 67, 67, 67, 67, 53, 53, 53, 53, 52, 52,
52, 52, 52, 52, 52, 52, 56, 56, 56, 56, 57, 57, 57,
57, 57, 57, 57, 57, 60, 60, 60, 60, 60, 60, 60, 60,
56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 60, 60,
60, 60, 57, 57, 57, 57, 57, 57, 57, 57, 56, 56, 56,
56, 52, 52, 52, 52, 52, 52, 52, 52, 49, 49, 49, 49,
78, 78, 78, 78, 63, 63, 63, 63, 60, 60, 60, 60, 60,
60, 60, 60, 60, 60, 60, 60, 64, 64, 64, 64, 60, 60,
60, 60, 60, 60, 60, 61, 64, 64, 64, 64, 60, 60, 60,
61, 60, 60, 60, 64, 64, 64, 64, 61, 60, 60, 60, 60,
60, 60, 60, 60, 60, 60, 60, 64, 64, 64, 64, 60, 60,
60, 60, 63, 63, 63, 63, 74, 74 };
int valoriJLiteraR[150] = { 
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
2, 2, 2, 2, 2, 8, 8, 8, 8, 150, 150, 150, 150,
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
16, 16, 16, 12, 12, 12, 12, 10, 10, 10, 10, 10, 10,
10, 10, 14, 14, 14, 18, 18, 18, 18, 22, 22, 22, 22,
30, 30, 30, 30, 34, 34, 34, 44, 44, 44, 44, 47, 47,
47, 48, 63, 63, 63, 64, 83, 83, 83, 103, 103, 103, 103,
114, 114, 114, 114, 110, 110, 110, 110, 108, 108, 108, 97, 96,
96, 96, 81, 81, 81, 81, 69, 69, 69, 69, 45, 45, 45,
18, 18, 18, 18, 14, 14, 14, 14, 6, 6, 6, 6, 2,
2, 2, 0, 0, 0, 0, 0, 0 };


//S)
int arieLiteraS = 7176;
float medieIJLiteraS = 47.840000;
int valoriILiteraS[150] = { 
23, 23, 23, 23, 23, 24, 12, 12, 12, 13, 12, 12,
12, 36, 36, 36, 36, 36, 36, 36, 36, 35, 35, 35, 24,
23, 23, 23, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
32, 38, 38, 38, 38, 43, 43, 43, 43, 49, 49, 49, 49,
61, 61, 61, 58, 57, 57, 57, 69, 69, 69, 69, 75, 75,
75, 76, 81, 81, 81, 87, 87, 87, 87, 86, 86, 86, 86,
93, 93, 93, 93, 87, 87, 87, 81, 80, 80, 80, 69, 69,
69, 69, 66, 66, 66, 66, 55, 55, 55, 49, 49, 49, 49,
46, 46, 46, 46, 41, 41, 41, 41, 35, 35, 35, 41, 41,
41, 41, 35, 35, 35, 35, 40, 40, 40, 40, 31, 31, 31,
43, 43, 43, 43, 44, 44, 44, 44, 50, 50, 50, 50, 21,
21, 21, 15, 15, 15, 15, 67, 67 };
int valoriJLiteraS[150] = { 
23, 23, 23, 23, 23, 24, 12, 12, 12, 13, 12, 12,
12, 36, 36, 36, 36, 36, 36, 36, 36, 35, 35, 35, 24,
23, 23, 23, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,
32, 38, 38, 38, 38, 43, 43, 43, 43, 49, 49, 49, 49,
61, 61, 61, 58, 57, 57, 57, 69, 69, 69, 69, 75, 75,
75, 76, 81, 81, 81, 87, 87, 87, 87, 86, 86, 86, 86,
93, 93, 93, 93, 87, 87, 87, 81, 80, 80, 80, 69, 69,
69, 69, 66, 66, 66, 66, 55, 55, 55, 49, 49, 49, 49,
46, 46, 46, 46, 41, 41, 41, 41, 35, 35, 35, 41, 41,
41, 41, 35, 35, 35, 35, 40, 40, 40, 40, 31, 31, 31,
43, 43, 43, 43, 44, 44, 44, 44, 50, 50, 50, 50, 21,
21, 21, 15, 15, 15, 15, 67, 67 };


//T)
int arieLiteraT = 6415;
float medieIJLiteraT = 42.766666;
int valoriILiteraT[150] = { 150, 150, 150, 150, 150, 150, 76, 74, 74, 74, 61, 61,
61, 61, 53, 53, 53, 53, 44, 44, 44, 44, 44, 44, 44,
44, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
35, 35, 39, 39, 39, 40, 49, 49 };
int valoriJLiteraT[150] = { 
38, 38, 26, 26, 26, 26, 26, 18, 18, 18, 18, 14,
14, 14, 14, 10, 10, 10, 10, 10, 10, 10, 10, 10, 6,
6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
6, 6, 6, 6, 8, 8, 8, 8, 10, 150, 150, 150, 150,
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
150, 150, 150, 150, 150, 12, 12, 12, 12, 8, 8, 8, 8,
8, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
6, 6, 6, 6, 6, 7, 10, 10, 10, 10, 14, 14, 14,
14, 18, 18, 18, 18, 18, 26, 26 };


//U)
int arieLiteraU = 4581;
float medieIJLiteraU = 30.540001;
int valoriILiteraU[150] = { 
118, 118, 63, 63, 63, 63, 47, 47, 47, 47, 43, 43,
43, 34, 31, 31, 31, 31, 31, 31, 31, 27, 27, 27, 27,
27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27,
27, 27, 27, 27, 27, 27, 27, 31, 31, 31, 31, 31, 31,
31, 35, 35, 35, 35, 27, 27, 27, 27, 27, 27, 27, 27,
27, 27, 27, 27, 27, 27, 27, 27, 23, 23, 23, 20, 20,
20, 20, 20, 20, 20, 20, 52, 52 };
int valoriJLiteraU[150] = { 
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
2, 2, 6, 6, 6, 6, 13, 13, 13, 14, 121, 121, 121,
121, 133, 133, 133, 133, 137, 137, 137, 137, 140, 140, 140, 140,
140, 140, 140, 144, 144, 144, 144, 144, 144, 144, 144, 47, 46,
46, 46, 23, 23, 23, 23, 12, 12, 12, 12, 8, 8, 8,
8, 8, 8, 8, 8, 4, 4, 4, 4, 2, 2, 2, 2,
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0,
0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
2, 2, 2, 2, 6, 6, 6, 6, 24, 24, 24, 25, 21,
21, 21, 21, 10, 10, 10, 10, 6, 6, 6, 6, 2, 2,
2, 2, 2, 2, 2, 2, 2, 2 };


//V)
int arieLiteraV = 4489;
float medieIJLiteraV = 29.926666;
int valoriILiteraV[150] = { 
107, 107, 67, 67, 67, 67, 46, 46, 46, 46, 43, 43,
43, 39, 39, 39, 39, 35, 35, 35, 35, 35, 35, 35, 35,
31, 31, 31, 31, 35, 35, 35, 35, 31, 31, 31, 31, 27,
27, 27, 31, 31, 31, 31, 31, 31, 31, 31, 30, 30, 30,
30, 30, 30, 30, 30, 28, 26, 26, 27, 30, 30, 30, 27,
27, 27, 27, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31,
31, 31, 31, 31, 31, 31, 27, 27, 27, 28, 31, 31, 31,
27, 27, 27, 27, 31, 31, 31, 31, 31, 31, 31, 31, 31,
31, 31, 31, 38, 38, 38, 38, 30, 30, 30, 30, 30, 30,
30, 24, 24, 24, 24, 24, 24, 24, 24, 20, 20, 20, 20,
16, 16, 16, 16, 16, 16, 16, 16, 8, 8, 8, 8, 8,
8, 8, 0, 0, 0, 0, 0, 0 };
int valoriJLiteraV[150] = { 
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 6, 6,
6, 13, 13, 13, 13, 21, 21, 21, 21, 29, 29, 29, 29,
37, 37, 37, 37, 48, 48, 48, 48, 56, 56, 56, 57, 63,
63, 63, 75, 75, 75, 75, 83, 83, 83, 83, 75, 75, 75,
75, 75, 75, 75, 75, 72, 72, 72, 72, 71, 71, 71, 72,
71, 71, 71, 70, 70, 70, 70, 69, 69, 69, 69, 58, 57,
57, 57, 43, 43, 43, 43, 23, 23, 23, 23, 11, 11, 11,
4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 3, 2, 2,
2, 2, 2, 2, 2, 2, 2, 2, 2, 10, 10, 10, 10,
25, 25, 25, 25, 17, 17, 17, 17, 10, 10, 10, 6, 6,
6, 6, 6, 6, 6, 6, 6, 6 };


//W)
int arieLiteraW = 6035;
float medieIJLiteraW = 40.233334;
int valoriILiteraW[150] = { 
110, 110, 70, 69, 69, 69, 57, 57, 57, 57, 51, 51,
51, 49, 49, 49, 49, 45, 45, 45, 45, 42, 42, 42, 42,
36, 36, 36, 37, 45, 45, 45, 45, 42, 42, 42, 44, 46,
46, 46, 44, 44, 44, 44, 41, 41, 41, 41, 49, 49, 49,
49, 46, 46, 46, 47, 42, 42, 42, 42, 45, 45, 45, 42,
41, 41, 41, 46, 46, 46, 46, 44, 44, 44, 44, 41, 41,
41, 42, 46, 46, 46, 46, 40, 40, 41, 41, 42, 42, 42,
48, 48, 48, 48, 41, 41, 41, 41, 49, 49, 49, 49, 44,
44, 44, 44, 46, 46, 46, 46, 46, 46, 46, 39, 38, 38,
38, 35, 35, 35, 35, 30, 29, 29, 29, 24, 24, 24, 24,
21, 21, 21, 21, 17, 16, 16, 16, 13, 13, 13, 8, 8,
8, 8, 3, 3, 3, 3, 3, 3 };
int valoriJLiteraW[150] = { 
2, 2, 2, 2, 6, 6, 6, 10, 10, 17, 17, 17,
25, 25, 25, 37, 37, 44, 44, 44, 56, 56, 56, 63, 63,
75, 75, 75, 83, 83, 83, 94, 94, 77, 75, 75, 79, 78,
79, 75, 75, 76, 77, 77, 73, 73, 73, 75, 75, 75, 53,
53, 35, 35, 35, 17, 17, 17, 9, 9, 2, 2, 2, 10,
10, 10, 10, 10, 17, 17, 17, 29, 29, 29, 37, 37, 56,
56, 56, 56, 56, 56, 63, 63, 75, 75, 75, 87, 87, 87,
87, 87, 79, 79, 79, 83, 82, 82, 79, 79, 82, 81, 81,
77, 77, 77, 65, 65, 49, 46, 46, 27, 27, 27, 15, 15,
15, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 6, 5,
5, 6, 6, 6, 5, 5, 10, 10, 10, 21, 21, 21, 13,
13, 6, 6, 6, 2, 2, 2, 2 };


//X)
int arieLiteraX = 5949;
float medieIJLiteraX = 39.660000;
int valoriILiteraX[150] = { 
	114, 114, 67, 67, 67, 67, 52, 52, 52, 52, 45, 45,
45, 45, 41, 41, 41, 41, 38, 38, 38, 38, 38, 38, 38,
38, 37, 37, 37, 38, 38, 38, 38, 38, 33, 33, 33, 37,
33, 33, 33, 35, 34, 34, 34, 37, 37, 37, 37, 38, 38,
38, 38, 34, 34, 34, 34, 37, 37, 37, 37, 37, 37, 37,
37, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
34, 34, 34, 34, 33, 33, 33, 33, 33, 33, 33, 33, 41,
41, 41, 41, 38, 38, 38, 38, 30, 30, 30, 30, 34, 34,
34, 34, 33, 33, 33, 34, 30, 30, 30, 38, 38, 38, 38,
39, 38, 38, 38, 31, 30, 30, 30, 34, 34, 34, 34, 38,
37, 37, 37, 34, 34, 34, 34, 42, 42, 42, 42, 49, 49,
49, 49, 57, 57, 57, 57, 75, 75 };
int valoriJLiteraX[150] = { 
0, 0, 0, 0, 0, 0, 2, 2, 2, 4, 4, 4,
4, 8, 8, 8, 8, 16, 16, 16, 16, 28, 28, 28, 36,
36, 36, 36, 48, 48, 48, 48, 40, 40, 40, 40, 41, 41,
41, 50, 49, 49, 49, 58, 57, 57, 57, 57, 57, 57, 58,
65, 65, 65, 57, 57, 57, 57, 61, 61, 61, 61, 57, 57,
57, 57, 61, 61, 61, 52, 52, 52, 52, 52, 52, 52, 52,
52, 52, 52, 52, 52, 52, 52, 59, 59, 59, 59, 51, 51,
51, 51, 55, 55, 55, 56, 57, 57, 57, 64, 63, 63, 63,
60, 60, 60, 60, 55, 55, 55, 56, 55, 55, 55, 64, 64,
64, 64, 52, 52, 52, 52, 40, 40, 40, 40, 32, 32, 32,
20, 20, 20, 20, 12, 12, 12, 12, 8, 8, 8, 8, 4,
4, 4, 2, 2, 2, 2, 2, 2 };


//Y)
int arieLiteraY = 5131;
float medieIJLiteraY = 34.206665;
int valoriILiteraY[150] = { 
102, 102, 59, 59, 59, 59, 46, 46, 46, 46, 42, 42,
42, 42, 37, 37, 37, 37, 30, 30, 30, 30, 33, 33, 33,
34, 30, 30, 30, 31, 34, 34, 34, 35, 30, 30, 30, 38,
34, 34, 34, 35, 34, 34, 34, 31, 30, 30, 30, 33, 33,
33, 33, 30, 30, 30, 30, 30, 30, 30, 30, 34, 34, 34,
34, 30, 30, 30, 30, 34, 34, 34, 34, 30, 30, 30, 30,
30, 30, 30, 30, 42, 42, 42, 42, 34, 34, 34, 34, 30,
30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30,
30, 30, 38, 38, 38, 38, 41, 41 };
int valoriJLiteraY[150] = { 
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
2, 6, 6, 6, 6, 14, 14, 14, 14, 18, 18, 18, 26,
26, 26, 26, 34, 34, 34, 34, 41, 41, 41, 42, 45, 45,
45, 53, 53, 53, 53, 61, 61, 61, 61, 69, 69, 69, 69,
69, 69, 69, 62, 61, 61, 61, 64, 63, 63, 63, 115, 115,
115, 115, 105, 105, 105, 97, 97, 97, 97, 89, 89, 89, 89,
81, 81, 81, 81, 73, 73, 73, 69, 69, 69, 69, 69, 69,
69, 69, 10, 10, 10, 10, 2, 2, 2, 4, 4, 4, 4,
4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 7, 6,
6, 6, 3, 3, 3, 3, 6, 6, 6, 7, 10, 10, 10,
18, 18, 18, 18, 14, 14, 14, 14, 10, 10, 10, 10, 6,
6, 6, 2, 2, 2, 2, 2, 2 };


//Z)
int arieLiteraZ = 6954;
float medieIJLiteraZ = 46.360001;
int valoriILiteraZ[150] = { 
125, 125, 120, 120, 120, 120, 61, 61, 61, 61, 56, 56,
56, 56, 48, 48, 48, 48, 48, 48, 48, 48, 42, 42, 42,
42, 34, 34, 34, 34, 38, 38, 38, 38, 34, 34, 34, 39,
35, 35, 35, 39, 39, 39, 39, 35, 34, 34, 34, 38, 38,
38, 38, 39, 39, 39, 39, 35, 35, 35, 35, 39, 39, 39,
39, 35, 34, 34, 34, 34, 34, 34, 34, 38, 38, 38, 38,
34, 34, 34, 35, 39, 39, 39, 39, 39, 39, 39, 39, 34,
34, 34, 34, 38, 38, 38, 38, 34, 34, 34, 34, 35, 35,
35, 35, 39, 39, 39, 39, 34, 34, 34, 38, 38, 38, 38,
41, 40, 40, 40, 36, 36, 36, 36, 45, 45, 45, 45, 46,
46, 46, 46, 49, 49, 49, 49, 57, 57, 57, 57, 58, 58,
58, 58, 75, 75, 75, 75, 150, 150 };
int valoriJLiteraZ[150] = { 
2, 2, 2, 2, 2, 2, 6, 6, 6, 6, 6, 14,
14, 14, 14, 34, 34, 34, 34, 48, 48, 48, 48, 48, 52,
52, 52, 52, 52, 52, 52, 52, 55, 55, 55, 55, 59, 59,
59, 59, 59, 63, 63, 63, 63, 63, 63, 63, 63, 59, 59,
59, 59, 60, 63, 63, 63, 63, 59, 59, 59, 59, 64, 63,
63, 63, 64, 64, 64, 64, 64, 60, 60, 60, 60, 64, 64,
64, 64, 60, 60, 60, 60, 60, 63, 63, 63, 63, 63, 63,
63, 63, 59, 59, 59, 59, 68, 67, 67, 67, 67, 59, 59,
59, 59, 55, 55, 55, 55, 48, 47, 47, 47, 47, 44, 44,
44, 44, 40, 40, 40, 40, 32, 32, 32, 32, 32, 32, 32,
32, 32, 28, 28, 28, 28, 24, 24, 24, 24, 24, 24, 24,
24, 24, 26, 26, 26, 26, 34, 34 };







//CIFRELE:


//Cifrele finale:
int cifreArie[10];
float cifreMedie[10];
int cifreI[10][150];
int cifreJ[10][150];


//0)
int arieLitera0 = 10389;
float medieIJLitera0 = 69.260002;
int valoriILitera0[150] = { 
20, 20, 20, 20, 20, 20, 20, 19, 19, 21, 32, 32,
32, 41, 40, 40, 40, 52, 52, 52, 52, 59, 59, 59, 59,
59, 59, 59, 59, 65, 65, 65, 65, 71, 71, 71, 73, 81,
81, 81, 81, 81, 81, 81, 91, 91, 91, 91, 91, 91, 91,
91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91,
91, 91, 91, 91, 91, 91, 91, 81, 81, 81, 73, 71, 71,
71, 71, 71, 71, 71, 65, 65, 65, 65, 59, 59, 59, 59,
52, 52, 52, 53, 46, 46, 46, 46, 40, 40, 40, 34, 32,
32, 33, 19, 19, 19, 20, 52, 52 };
int valoriJLitera0[150] = { 
66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 88, 88,
88, 88, 88, 88, 104, 104, 104, 104, 104, 104, 104, 116, 116,
116, 116, 116, 116, 127, 127, 127, 127, 127, 127, 128, 134, 134,
134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 135, 18, 17,
17, 17, 17, 17, 11, 10, 10, 10, 10, 10, 10, 2, 2,
2, 2, 2, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8,
8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 2, 2,
2, 2, 2, 2, 4, 10, 10, 10, 10, 10, 10, 27, 26,
26, 26, 26, 26, 27, 134, 134, 134, 134, 134, 134, 128, 127,
127, 127, 127, 127, 127, 120, 120, 120, 120, 120, 120, 112, 112,
112, 112, 112, 112, 112, 96, 96, 96, 96, 96, 96, 78, 78,
76, 76, 76, 76, 76, 76, 76, 76 };



//1)
int arieLitera1 = 9919;
float medieIJLitera1 = 66.126663;
int valoriILitera1[150] = { 14, 14, 14, 14, 14, 35, 35, 
35, 35, 48, 48, 48, 48, 62, 62, 62, 82, 82, 82, 82, 96,
96, 96, 96, 113, 113, 113, 87, 86, 86, 86, 62, 62, 62, 
62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 
62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 
62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
62, 62, 62, 62, 62, 75, 75, 75, 75, 89, 89, 89, 96, 140,
140, 140, 140, 140 };
int valoriJLitera1[150] = { 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
12, 12, 12, 12, 12, 12, 12, 13, 12, 12, 12, 12, 12, 12,
12, 12, 12, 12, 12, 12, 12, 16, 16, 16, 17, 17, 17, 20,
20, 20, 20, 20, 20, 20, 28, 28, 28, 28, 28, 28, 28, 137,
137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137,
137, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141,
141, 141, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145,
145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 150,
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
150, 13, 13, 13, 13, 13, 13, 9, 9, 9, 9, 9, 9, 9, 6, 6, 6, 
6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
5 };




//2)
int arieLitera2 = 7634;
float medieIJLitera2 = 50.893333;
int valoriILitera2[150] = { 
20, 20, 20, 20, 20, 20, 59, 59, 59, 60, 85, 85,
85, 98, 98, 98, 98, 111, 111, 111, 111, 111, 111, 111, 111,
78, 78, 78, 78, 59, 59, 58, 58, 52, 52, 52, 52, 45,
45, 45, 45, 45, 45, 45, 39, 39, 39, 39, 39, 39, 39,
39, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 27,
26, 26, 26, 32, 32, 32, 32, 26, 26, 26, 26, 19, 19,
19, 20, 20, 20, 20, 20, 20, 20, 20, 21, 19, 19, 19,
13, 13, 14, 14, 13, 13, 13, 13, 7, 7, 7, 7, 7,
7, 7, 7, 7, 7, 6, 6, 7, 7, 7, 2, 0, 0,
0, 3, 3, 3, 3, 17, 17, 17, 17, 114, 114, 114, 114,
114, 114, 114, 114, 121, 121, 121, 122, 127, 127, 127, 125, 124,
124, 124, 130, 130, 130, 130, 140, 140 };
int valoriJLitera2[150] = { 
2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 6, 6,
6, 6, 6, 6, 14, 14, 14, 14, 14, 14, 14, 25, 25,
25, 25, 25, 26, 29, 29, 29, 29, 29, 29, 29, 40, 40,
40, 40, 40, 40, 44, 44, 44, 44, 44, 44, 45, 44, 44,
44, 44, 44, 44, 48, 48, 47, 47, 47, 47, 47, 48, 48,
48, 48, 48, 48, 56, 54, 54, 54, 54, 54, 54, 62, 62,
62, 62, 62, 62, 66, 69, 69, 69, 69, 69, 70, 71, 71,
71, 71, 71, 71, 72, 86, 86, 86, 86, 86, 86, 106, 106,
106, 106, 106, 106, 106, 94, 94, 94, 94, 94, 94, 90, 90,
90, 90, 90, 90, 90, 83, 83, 83, 83, 83, 83, 72, 71,
71, 71, 71, 71, 71, 52, 52, 52, 52, 52, 52, 20, 19,
19, 19, 19, 19, 19, 23, 23, 23 };


//3)
int arieLitera3 = 6724;
float medieIJLitera3 = 44.826668;
int valoriILitera3[150] = {
25, 25, 25, 25, 25, 25, 63, 63, 63, 63, 87, 87,
87, 53, 50, 50, 50, 44, 43, 43, 43, 50, 50, 50, 50,
44, 44, 44, 44, 44, 44, 44, 44, 31, 31, 31, 31, 31,
31, 31, 32, 31, 31, 31, 25, 25, 25, 25, 12, 12, 12,
12, 18, 18, 18, 20, 32, 32, 32, 32, 44, 44, 44, 68,
68, 68, 68, 76, 75, 75, 75, 63, 63, 63, 63, 59, 59,
59, 59, 53, 53, 53, 53, 47, 47, 47, 47, 41, 41, 41,
41, 41, 41, 41, 35, 34, 34, 34, 34, 34, 34, 34, 28,
28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
28, 19, 19, 19, 19, 25, 25, 25, 25, 43, 43, 43, 44,
53, 53, 53, 54, 66, 66, 66, 68, 63, 63, 63, 101, 100,
100, 100, 75, 75, 75, 75, 75, 75 };
int valoriJLitera3[150] = { 
8, 8, 8, 8, 8, 8, 8, 8, 8, 19, 19, 19,
19, 19, 19, 19, 23, 23, 23, 23, 23, 23, 25, 25, 25,
25, 25, 25, 25, 25, 25, 25, 25, 25, 23, 22, 21, 21,
21, 21, 21, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
20, 20, 21, 20, 20, 20, 20, 20, 17, 17, 17, 17, 17,
17, 18, 25, 25, 25, 25, 25, 25, 31, 31, 31, 31, 31,
32, 42, 42, 42, 42, 42, 42, 46, 46, 46, 46, 46, 46,
48, 62, 62, 62, 62, 62, 62, 74, 74, 74, 74, 74, 74,
88, 88, 88, 88, 88, 89, 89, 87, 87, 87, 87, 87, 89,
92, 92, 92, 92, 92, 92, 104, 104, 104, 104, 104, 104, 90,
89, 89, 89, 89, 89, 70, 70, 70, 70, 70, 70, 70, 42,
42, 42, 42, 42, 42, 42, 42, 42 };


//4)
int arieLitera4 = 7659;
float medieIJLitera4 = 51.060001;
int valoriILitera4[150] = { 
	12, 12, 12, 12, 12, 13, 19, 19, 19, 19, 25, 25,
25, 25, 25, 25, 25, 31, 31, 31, 31, 37, 37, 37, 37,
37, 37, 37, 38, 44, 44, 44, 44, 50, 50, 50, 51, 43,
43, 43, 37, 37, 37, 37, 37, 37, 37, 37, 44, 44, 44,
44, 43, 43, 43, 43, 37, 37, 37, 37, 37, 37, 37, 43,
43, 43, 43, 44, 44, 44, 44, 38, 37, 37, 37, 37, 37,
37, 37, 43, 43, 43, 43, 43, 43, 43, 43, 37, 37, 37,
38, 37, 37, 37, 46, 46, 46, 46, 150, 150, 150, 150, 150,
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
150, 38, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37,
37, 37, 37, 37, 37, 37, 37, 37
 };
int valoriJLitera4[150] = { 
	23, 23, 23, 23, 23, 23, 23, 23, 23, 20, 19, 19,
19, 19, 19, 19, 23, 23, 23, 23, 23, 23, 23, 23, 23,
23, 23, 23, 19, 19, 19, 19, 19, 19, 24, 23, 23, 23,
23, 23, 23, 23, 23, 23, 23, 23, 23, 19, 19, 19, 19,
19, 19, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
23, 23, 19, 19, 19, 19, 19, 19, 22, 22, 22, 22, 22,
23, 23, 23, 23, 23, 23, 23, 27, 27, 27, 27, 27, 27,
29, 129, 129, 129, 129, 129, 129, 133, 133, 133, 133, 133, 133,
140, 140, 140, 140, 140, 140, 144, 144, 144, 144, 144, 144, 145,
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 19,
19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
19, 19, 19, 19, 19, 19, 19, 19
 };


//5)
int arieLitera5 = 8626;
float medieIJLitera5 = 57.506668;
int valoriILitera5[150] = { 
103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 109, 109,
109, 109, 100, 100, 100, 100, 100, 100, 100, 101, 107, 107, 107,
107, 100, 100, 100, 100, 6, 6, 6, 6, 6, 6, 6, 6,
0, 0, 0, 6, 6, 6, 6, 25, 25, 25, 25, 62, 62,
62, 62, 81, 81, 81, 81, 93, 93, 93, 93, 106, 106, 106,
106, 119, 119, 119, 119, 125, 125, 125, 125, 82, 82, 82, 82,
63, 63, 63, 63, 59, 59, 59, 59, 47, 47, 47, 47, 41,
41, 41, 41, 34, 34, 34, 34, 28, 28, 28, 28, 28, 28,
28, 28, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
17, 16, 16, 16, 16, 16, 16, 16, 19, 19, 19, 19, 39,
38, 38, 38, 44, 44, 44, 44, 44, 44, 44, 44, 44, 43,
43, 43, 50, 50, 50, 50, 81, 81 };
int valoriJLitera5[150] = { 
103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 109, 109,
109, 109, 100, 100, 100, 100, 100, 100, 100, 101, 107, 107, 107,
107, 100, 100, 100, 100, 6, 6, 6, 6, 6, 6, 6, 6,
0, 0, 0, 6, 6, 6, 6, 25, 25, 25, 25, 62, 62,
62, 62, 81, 81, 81, 81, 93, 93, 93, 93, 106, 106, 106,
106, 119, 119, 119, 119, 125, 125, 125, 125, 82, 82, 82, 82,
63, 63, 63, 63, 59, 59, 59, 59, 47, 47, 47, 47, 41,
41, 41, 41, 34, 34, 34, 34, 28, 28, 28, 28, 28, 28,
28, 28, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
17, 16, 16, 16, 16, 16, 16, 16, 19, 19, 19, 19, 39,
38, 38, 38, 44, 44, 44, 44, 44, 44, 44, 44, 44, 43,
43, 43, 50, 50, 50, 50, 81 };


//6)
int arieLitera6 = 8376;
float medieIJLitera6 = 55.840000;
int valoriILitera6[150] = { 
	3, 3, 0, 0, 0, 0, 13, 13, 13, 14, 13, 13,
13, 20, 19, 20, 20, 27, 27, 27, 27, 26, 26, 26, 26,
33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 32, 32, 32,
32, 32, 33, 33, 33, 33, 39, 39, 39, 39, 33, 32, 32,
32, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 58,
58, 59, 59, 82, 82, 82, 82, 89, 88, 88, 88, 88, 88,
88, 88, 98, 98, 98, 98, 91, 91, 91, 91, 91, 91, 91,
91, 91, 91, 91, 91, 91, 91, 91, 85, 85, 85, 85, 85,
85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85,
85, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
65, 65, 65, 65, 64, 64, 64, 66, 59, 59, 59, 40, 39,
39, 39, 32, 32, 33, 33, 65, 65 };
int valoriJLitera6[150] = { 
50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 65, 65,
65, 65, 65, 65, 81, 81, 81, 81, 81, 81, 81, 93, 93,
93, 93, 93, 93, 100, 100, 100, 100, 100, 100, 101, 111, 111,
111, 111, 111, 111, 115, 115, 115, 115, 115, 115, 115, 60, 60,
60, 60, 60, 60, 38, 37, 36, 36, 36, 36, 36, 25, 25,
25, 25, 25, 25, 22, 18, 18, 18, 18, 18, 18, 14, 14,
14, 14, 14, 14, 18, 18, 18, 18, 18, 18, 18, 18, 18,
18, 18, 18, 18, 19, 21, 21, 21, 21, 21, 21, 26, 25,
25, 25, 25, 25, 26, 52, 52, 52, 52, 52, 52, 81, 81,
81, 81, 81, 81, 81, 69, 69, 69, 69, 69, 69, 69, 69,
69, 69, 69, 69, 69, 62, 62, 62, 62, 62, 62, 50, 50,
50, 50, 50, 50, 50, 52, 52, 52 };


//7)
int arieLitera7 = 5978;
float medieIJLitera7 = 39.853333;
int valoriILitera7[150] = { 
134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134,
134, 135, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132,
132, 125, 125, 125, 125, 31, 31, 31, 32, 27, 27, 27, 27,
15, 15, 15, 15, 15, 15, 15, 19, 19, 19, 19, 13, 13,
13, 13, 19, 19, 19, 19, 19, 19, 19, 19, 13, 13, 13,
13, 19, 19, 19, 19, 19, 19, 19, 19, 12, 12, 12, 12,
18, 18, 18, 18, 18, 18, 18, 18, 12, 12, 12, 13, 19,
19, 19, 19, 19, 19, 19, 19, 13, 13, 13, 13, 19, 19,
19, 19, 19, 19, 19, 19, 13, 13, 13, 19, 19, 19, 19,
13, 12, 12, 12, 12, 12, 12, 12, 18, 18, 18, 18, 12,
12, 12, 12, 12, 12, 12, 12, 19, 19, 19, 19, 13, 13,
13, 13, 13, 13, 13, 13, 19, 19 };
int valoriJLitera7[150] = { 
11, 11, 11, 4, 4, 4, 4, 4, 5, 20, 20, 20, 20, 20, 20, 21, 
34, 34, 34, 34, 34, 34, 30, 30, 30, 30, 30, 30, 30, 30, 30, 
30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 
30, 30, 30, 30, 30, 30, 30, 32, 32, 32, 32, 32, 32, 44, 44, 
44, 44, 44, 44, 44, 56, 56, 56, 56, 56, 56, 58, 58, 58, 58, 
58, 58, 57, 57, 57, 57, 57, 57, 58, 57, 57, 57, 57, 57, 58, 
62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 
62, 62, 62, 58, 58, 58, 58, 58, 58, 58, 61, 61, 61, 61, 61, 
61, 49, 49, 49, 49, 49, 49, 38, 38, 38, 38, 38, 38, 26, 26, 
26, 26, 26, 26, 26, 14, 14, 14, 14, 14, 14, 14, 14, 14 };


//8)
int arieLitera8 = 9869;
float medieIJLitera8 = 65.793335;
int valoriILitera8[150] = { 
31, 31, 31, 31, 31, 32, 25, 25, 25, 26, 38, 38,
38, 50, 50, 50, 50, 51, 50, 50, 50, 65, 65, 65, 65,
65, 65, 65, 66, 72, 72, 72, 72, 78, 78, 78, 78, 78,
78, 78, 78, 78, 78, 78, 75, 75, 75, 75, 75, 75, 75,
75, 81, 81, 81, 81, 75, 75, 75, 76, 76, 76, 76, 78,
75, 75, 75, 69, 68, 68, 68, 69, 69, 69, 69, 69, 69,
69, 69, 75, 75, 75, 75, 68, 68, 68, 71, 82, 82, 82,
79, 78, 78, 78, 84, 84, 84, 84, 78, 78, 78, 78, 79,
79, 79, 79, 73, 73, 73, 73, 73, 73, 73, 77, 75, 75,
75, 75, 75, 75, 75, 66, 66, 66, 66, 66, 66, 66, 66,
57, 57, 57, 57, 56, 56, 56, 58, 50, 50, 50, 44, 44,
44, 44, 38, 37, 37, 37, 75, 75 };
int valoriJLitera8[150] = { 
8, 8, 8, 8, 8, 8, 8, 8, 8, 50, 50, 50,
50, 50, 50, 51, 78, 78, 78, 78, 78, 78, 89, 89, 89,
89, 89, 89, 104, 104, 104, 104, 104, 105, 114, 114, 114, 114,
114, 114, 116, 89, 89, 89, 89, 89, 91, 70, 70, 70, 70,
70, 70, 49, 49, 49, 49, 49, 49, 37, 37, 37, 37, 37,
37, 38, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39,
39, 39, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38,
39, 39, 39, 39, 39, 39, 39, 45, 45, 45, 45, 45, 45,
60, 60, 60, 60, 60, 60, 78, 78, 77, 77, 77, 79, 80,
119, 119, 119, 119, 119, 119, 111, 111, 111, 111, 111, 111, 100,
100, 100, 100, 100, 100, 86, 86, 85, 85, 85, 85, 85, 62,
62, 62, 62, 62, 62, 62, 62, 62 };



//9)
int arieLitera9 = 11623;
float medieIJLitera9 = 77.486664;
int valoriILitera9[150] = {
	28, 28, 28, 28, 28, 64, 64, 64, 64, 86, 
86, 86, 86, 80, 80, 80, 88, 87, 87, 87, 94, 94, 94, 94, 93, 93, 93, 
92, 92, 92, 92, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 
104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
104, 104, 104, 104, 102, 101, 101, 101, 101, 101, 101, 101, 101, 101,
101, 96, 96, 96, 96, 101, 101, 101, 102, 107, 107, 107, 124, 124, 124,
124, 118, 118, 118, 118, 90, 90, 90, 47, 46, 46, 46, 52, 52, 52, 52, 52,
52, 52, 52, 52, 52, 52, 46, 46, 46, 47, 52, 52, 52, 46, 46, 46, 46, 46, 
46, 46, 47, 47, 47, 47, 46, 46, 46, 47, 46, 46, 46, 47, 52, 52, 52, 52, 
52, 52, 52, 52, 52, 52, 55, 55, 55, 55, 55, 55 };
int valoriJLitera9[150] = { 23, 23, 23, 23, 23, 23, 23, 23, 24, 49, 49,
49, 49, 49, 64, 64, 64, 65, 65, 65, 75, 75, 75, 75, 75, 75, 82, 82, 82, 
82, 82, 82, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 101, 101, 101,
101, 101, 101, 104, 104, 104, 104, 104, 105, 67, 67, 67, 67, 67, 68, 54,
53, 53, 53, 53, 50, 49, 49, 49, 49, 50, 46, 46, 46, 46, 46, 46, 53, 53, 
53, 53, 53, 54, 61, 61, 61, 61, 61, 70, 70, 70, 70, 70, 70, 92, 92, 92, 
92, 92, 92, 125, 125, 125, 125, 125, 125, 117, 117, 117, 117, 117, 117, 
114, 114, 114, 114, 114, 106, 106, 106, 106, 106, 106, 99, 99, 99, 99, 99,
99, 88, 88, 88, 88, 88, 88, 80, 80, 80, 80, 80, 63, 62, 62, 62, 62, 62, 62,
62, 62 };







//Alte caractere speciale:


//Caractere speciale finale:
int caractereSpecialeArie[10];
float caractereSpecialeMedie[10];
int caractereSpecialeI[10][150];
int caractereSpecialeJ[10][150];



//Fara linie; (Nu este recunoscuta bine;)

int arieLiteraLinie = 0;
float medieIJLiteraLinie = 0;
int valoriILiteraLinie[150] = {  };
int valoriJLiteraLinie[150] = {  };



// 2) Paranteza Dreapta:
int arieLiteraParantezaD = 6293;
float medieIJLiteraParantezaD = 41.953335;
int valoriILiteraParantezaD[150] = { 
	5, 5, 0, 0, 11, 0, 0, 11, 1, 1, 22, 11, 11,
	22, 22, 22, 32, 21, 21, 21, 21, 21, 32, 32,
	32, 43, 32, 32, 32, 32, 32, 43, 43, 43, 53,
	43, 43, 43, 43, 43, 43, 43, 43, 54, 54, 54, 
	54, 54, 54, 70, 70, 70, 70, 70, 70, 70, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 
	59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59,
	59, 59, 59, 59, 59, 59, 59, 70, 70, 70, 70,
	70, 70, 70, 54, 54, 54, 54, 54, 54, 54, 54, 
	54, 43, 43, 43, 43, 43, 53, 43, 43, 43, 32, 
	32, 32, 32, 32, 43, 32, 32, 32, 21, 21, 21, 
	21, 21, 32, 22, 22, 22, 11, 11, 22, 1, 1, 11,
	0, 0, 11, 11 };
int valoriJLiteraParantezaD[150] = { 
	2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
	0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 8, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
	14, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 
	38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 68, 68,
	68, 68, 68, 68, 68, 68, 68, 68, 68, 103, 103, 103,
	103, 103, 103, 103, 103, 103, 103, 103, 91, 91, 91,
	91, 91, 91, 91, 91, 91, 91, 91, 85, 85, 85, 85, 85,
	85, 85, 85, 85, 85, 70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 
	55, 55, 55, 55, 55, 55 };


// 3) Paranteza Stanga:
int arieLiteraParantezaS = 6390;
float medieIJLiteraParantezaS = 42.599998;
int valoriILiteraParantezaS[150] = { 
0, 0, 0, 0, 16, 0, 0, 22, 11, 11, 21, 11, 11, 22, 22, 
22, 33, 22, 22, 32, 32, 32, 32, 21, 21, 32, 32, 32, 43, 
43, 43, 43, 32, 32, 43, 43, 43, 43, 43, 43, 53, 53, 53,
53, 53, 53, 53, 53, 53, 64, 54, 54, 54, 54, 54, 54, 54, 
54, 54, 54, 54, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
70, 70, 70, 70, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 
54, 54, 54, 54, 64, 53, 53, 53, 53, 53, 53, 53, 53, 53, 
43, 43, 43, 43, 43, 54, 43, 43, 43, 43, 43, 43, 32, 32, 
32, 21, 21, 32, 22, 22, 22, 22, 22, 33, 22, 22, 22, 11, 
11, 21, 0, 0, 11, 0, 0, 16, 16 };
int valoriJLiteraParantezaS[150] = { 
	28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 
	28, 28, 28, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 
	55, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 85, 85, 
	85, 85, 85, 85, 85, 85, 85, 85, 85, 97, 97, 97, 97, 
	97, 97, 97, 97, 97, 97, 97, 103, 103, 103, 103, 103, 
	103, 103, 103, 103, 103, 103, 59, 59, 59, 59, 59, 59,
	59, 59, 59, 59, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 
	35, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 14, 14, 
	14, 14, 14, 14, 14, 14, 14, 14, 17, 5, 5, 5, 5, 5, 5, 5,
	5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3 };


// 4) Virgula:
int arieLiteraPctVirgula = 9351;
float medieIJLiteraPctVirgula = 62.340000;
int valoriILiteraPctVirgula[150] = { 
34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 100, 100, 
100, 100, 100, 100, 100, 100, 102, 150, 150, 150, 150, 150, 150,
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
150, 150, 150, 127, 125, 125, 125, 125, 125, 125, 125, 125, 61, 
59, 58, 58, 58, 58, 58, 58, 58, 25, 25, 25, 25, 25, 25, 25, 25, 
25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 
25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 18, 17, 17, 17, 17, 
17, 17, 17, 17, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 17, 17, 17, 17 };
int valoriJLiteraPctVirgula[150] = { 
	35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 35, 36, 37, 53, 53, 53, 53, 53,
	53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 55, 62, 62, 62, 
	62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 79, 79, 
	79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 80, 80, 80, 
	67, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 
	66, 68, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 
	53, 53, 53, 64, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 
	62, 62, 62, 62, 63, 90, 88, 88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88 };


// 5) Semn Exclamare:
int arieLiteraSemnExclamare = 14759;
float medieIJLiteraSemnExclamare = 98.393333;
int valoriILiteraSemnExclamare[150] = { 
64, 64, 64, 64, 64, 64, 65, 65, 65, 118, 118, 118, 118, 118, 118,
120, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 118, 
118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 
118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 
118, 118, 118, 118, 65, 65, 65, 64, 64, 64, 64, 64, 64, 64, 64, 
64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 22, 22, 
22, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 
21, 21, 21, 21, 21, 21, 21, 21, 21, 21 };
int valoriJLiteraSemnExclamare[150] = { 
	50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 
	51, 51, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 
	88, 88, 88, 88, 88, 88, 88, 88, 94, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 150, 150, 150, 150, 150, 150, 150, 150, 
	150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 
	150, 125, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
	122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 88,
	88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88,
	88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 
	88 };


// 6) Semn Intrebare:
int arieLiteraSemnIntrebare = 6150;
float medieIJLiteraSemnIntrebare = 41.000000;
int valoriILiteraSemnIntrebare[150] = { 
35, 35, 35, 35, 35, 35, 35, 36, 37, 36, 36,
36, 36, 36, 50, 50, 50, 50, 50, 58, 57, 57, 
57, 57, 57, 75, 75, 75, 75, 75, 75, 68, 67, 
67, 67, 67, 85, 85, 85, 85, 85, 85, 85, 85, 
85, 85, 85, 92, 92, 92, 92, 92, 92, 92, 92, 
92, 92, 92, 76, 74, 74, 74, 74, 74, 60, 60, 
60, 60, 60, 46, 46, 46, 46, 46, 46, 46, 46, 
46, 46, 47, 48, 43, 43, 43, 43, 43, 36, 36, 
36, 36, 36, 36, 29, 29, 29, 29, 29, 29, 29, 
29, 29, 29, 29, 15, 15, 15, 15, 15, 15, 14, 
14, 14, 14, 14, 14, 14, 14, 14, 14, 9, 7, 7,
7, 7, 7, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
int valoriJLiteraSemnIntrebare[150] = { 
22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 39,
39, 39, 39, 39, 39, 39, 50, 50, 50, 50, 50, 50, 
50, 55, 55, 55, 55, 55, 55, 55, 28, 28, 28, 28,
28, 28, 28, 13, 11, 11, 11, 11, 11, 11, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 
8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 19, 19, 19, 19, 19,
19, 19, 26, 26, 25, 25, 25, 25, 25, 36, 36, 36, 
36, 36, 36, 37, 52, 50, 50, 50, 50, 50, 51, 53, 
95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 
95, 95, 83, 83, 83, 83, 83, 83, 83, 78, 78, 78, 
78, 78, 78, 78, 67, 67, 67, 67, 67, 67, 67, 56, 
56, 56, 56, 56, 56, 56, 56, 56, 56, 56 };



// 7) Virgula:
int arieLiteraVirgula = 9351;
float medieIJLiteraVirgula = 62.340000;
int valoriILiteraVirgula[150] = { 
34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
100, 100, 100, 100, 100, 100, 100, 100, 102, 150, 150,
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 
127, 125, 125, 125, 125, 125, 125, 125, 125, 61, 59, 
58, 58, 58, 58, 58, 58, 58, 25, 25, 25, 25, 25, 25, 
25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 
25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 
25, 25, 25, 18, 17, 17, 17, 17, 17, 17, 17, 17, 1, 1,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 
0, 0, 0, 0, 0, 0, 3, 17, 17, 17, 17 };
int valoriJLiteraVirgula[150] = { 
35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
35, 35, 35, 35, 35, 35, 35, 35, 35, 36, 37, 53, 53, 53,
53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 55,
62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
62, 62, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79,
79, 79, 80, 80, 80, 67, 66, 66, 66, 66, 66, 66, 66, 66,
66, 66, 66, 66, 66, 66, 66, 68, 53, 53, 53, 53, 53, 53, 
53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 64, 62, 62, 62,
62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 63, 90,
88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88,
88, 88, 88, 88, 88, 88, 88, 88, 88, 88 };


// 8) Punct:
int arieLiteraPunct = 18030;
float medieIJLiteraPunct = 120.199997;
int valoriILiteraPunct[150] = { 
37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 
37, 37, 37, 37, 37, 37, 37, 37, 37, 38, 38, 38, 39, 39, 
122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 
122, 122, 122, 122, 122, 122, 122, 124, 150, 150, 150, 
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 
150, 150, 150, 150, 150, 150, 123, 122, 122, 122, 122, 
122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 
122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 
122 };
int valoriJLiteraPunct[150] = {
75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75,
75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 76, 77, 122, 122
, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122,
122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 
122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 127, 
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 
150, 124, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 
122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 
122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 
122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122 };


// 9) Plus:
int arieLiteraPlus = 3459;
float medieIJLiteraPlus = 23.059999;
int valoriILiteraPlus[150] = {
12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 
12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 
12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 
12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 150, 150, 
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 14, 12, 
12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
12, 12, 12, 12 };
int valoriJLiteraPlus[150] = { 
12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 
12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 150, 150, 
150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 14, 12, 
12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 
12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 
12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 
12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 
12, 12, 12, 12, 12, 12, 12, 12 };


// 10) MaiMic 
int arieLiteraMaiMic = 0;
float medieIJLiteraMaiMic = 0;
int valoriILiteraMaiMic[150] = { 
3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 22, 22, 22, 22, 22, 22, 22,
22, 18, 18, 18, 18, 18, 18, 18, 13, 13, 13, 13, 13, 13, 13,
13, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
19, 13, 13, 13, 13, 13, 13, 13, 19, 18, 18, 18, 18, 18, 18,
19, 19, 19, 19, 19, 19, 19, 19, 19, 18, 18, 18, 18, 18, 18,
19, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19,
19, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19,
19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
19, 19, 19, 19, 19, 19, 19, 19, 19, 18, 18, 18, 18, 18, 18,
19, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22 };
int valoriJLiteraMaiMic[150] = { 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 15, 15, 15, 
15, 15, 15, 15, 15, 15, 15, 15, 15, 30, 30, 30, 30, 30, 30, 
16, 15, 15, 15, 15, 15, 16, 30, 30, 30, 30, 30, 30, 15, 15, 
15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 15, 15, 15, 15, 
15, 15, 15, 15, 15, 15, 15, 15, 23, 23, 23, 23, 23, 23, 15, 
15, 15, 15, 15, 15, 30, 30, 30, 30, 30, 30, 30, 15, 15, 15, 
15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 
15, 15, 15, 15, 15, 15, 16, 22, 22, 22, 22, 22, 22, 15, 15,
15, 15, 15, 15, 34, 34, 34, 34, 34, 34, 20, 19, 19, 19, 19, 
19, 19, 19, 19, 19, 19, 19, 19, 30, 30, 30 };







//Pentru rezultate:
string litereMiciRezultate[28]; 
string litereMariRezultate[26];
string cifreRezultate[10];
string caractereSpecialeRezultate[10];









//FUNCTIILE DIN PROIECT:



//1) Open image: Doar pentru testare proiect, deschide o imagine;
void OpenImage()
{
	char fname[MAX_PATH];
	while(openFileDlg(fname))
	{
		Mat src;
		src = imread(fname);
		imshow("image",src);
		waitKey();
	}
}




//2) Histogram: Pentru testarea proiectiilor, pentru a se vedea asemanarile;
void showHistogram(const std::string& name, int* hist, const int  hist_cols, const int hist_height)
{
	Mat imgHist(hist_height, hist_cols, CV_8UC3, CV_RGB(255, 255, 255)); 

	int max_hist = 0;
	for (int i = 0; i<hist_cols; i++)
	if (hist[i] > max_hist)
		max_hist = hist[i];
	double scale = 1.0;
	scale = (double)hist_height / max_hist;
	int baseline = hist_height - 1;

	for (int x = 0; x < hist_cols; x++) {
		Point p1 = Point(x, baseline);
		Point p2 = Point(x, baseline - cvRound(hist[x] * scale));
		line(imgHist, p1, p2, CV_RGB(255, 0, 255)); 
	}

	imshow(name, imgHist);
}




//3) Etichetare caractere (si functiile sale mai mici):
int minimLista(vector<int> lista)
{
	//Calcul minim din lista:
	int sizeLista = lista.size(); 
	int minim = 10000;
	for (int i = 1; i < sizeLista; i++)
	{
		if (lista[i] < minim)
		{
			minim = lista[i];
		}
	}
	return minim;
}


//Pentru vecini anteriori:
int vecinAnteriorI[4] = { -1, -1, -1,  0 };
int vecinAnteriorJ[4] = { -1,  0,  1, -1 };


//Pentru dilatare: (kernel de 8 vecini)
void kernel8Vecini(Mat* sursa, int iMinus, int iPlus, int jMinus, int jPlus, int i, int j)
{
	sursa->at<uchar>(iMinus, jMinus) = 0;
	sursa->at<uchar>(iMinus, j) = 0;
	sursa->at<uchar>(iMinus, jPlus) = 0;
	sursa->at<uchar>(i, jMinus) = 0;
	sursa->at<uchar>(i, j) = 0;
	sursa->at<uchar>(i, jPlus) = 0;
	sursa->at<uchar>(iPlus, jMinus) = 0;
	sursa->at<uchar>(iPlus, j) = 0;
	sursa->at<uchar>(iPlus, jPlus) = 0;
}







//!!!FUNCTIA FINALA DE GASIRE A SIRULUI DIN IMAGINEA CU CARACTERE!!!

void TranspunereImagineInText() 
{
	//Pentru scriere in fisier de out (pentru a salva date despre text);
	//Am folosit pentru a salva rapid datele despre caracterele din baza de date;
	ofstream outCaracter; 
	outCaracter.open("OutputCaractereBazaDate.txt", std::ios_base::app);


	//Citirea in while a imaginii:
	char fname[MAX_PATH];
	while (openFileDlg(fname)) 
	{
		//INITIALIZARI:



		//1) Pragul daca se doreste setat pentru binarizare:
		//Hardcodat pe moment;
		int prag = 0;
		//printf("\n\nPragul dorit pentru binarizare: (Intre 20 - 200)\n");
		//printf("Prag-\n"); 
		prag = 70;
		//scanf("%d", &prag);

		if (prag < 20 || prag > 200)
		{
			printf("\nNu ati ales pragul bine!\n");
			continue;
		}



		//2) Alegerea dintre felurile de afisare: Adica arie, medie, etc...;
		int alegereFinala = 0; 
		printf("\n\nAlegerea stringului final: Din (1) (2) (3) (4) (5)\n");
		printf("1 = Dupa arie / 2 = Dupa medie / 3 = Dupa suma diferente I / 4 = Dupa suma diferente J / 5 = Dupa suma diferente I si J (Best one) :\n");
		
		//ASTA O LAS AICI, DAR DOAR 5 MERGE CU ADEVARAT BINE!!!
		//alegereFinala = 5; //MERGE CEL MAI BINE CRED!!! :)
		scanf("%d", &alegereFinala);


		if (alegereFinala != 1 && alegereFinala != 2 && alegereFinala != 3 && alegereFinala != 4 && alegereFinala != 5)
		{
			printf("\nNu ati introdus alegerea bine!\n");
			continue;
		}




		//3) Alegerea numarului de dilatari pe care sa il faci:
		//Pentru a mari literele, daca nu se eticheteaza bine:
		int alegereDilatare = -1; 
		printf("\n\nAlegerea numarului de dilatari (Preferabil 0): (De la 0 in sus! Fara numere negative!)\n");

		//alegereDilatare = 0; 
		//alegereDilatare = 1; 
		scanf("%d", &alegereDilatare);

		if (alegereDilatare < 0)
		{
			printf("\nNu ati introdus alegerea bine!\n");
			continue;
		}




		//4) Nefolosita in final:
		int alegereKernelDistance = -1; 
		//printf("\n\nAlegerea distantei kernel (nu o mai folosesc): (De la 0 in sus! Fara numere negative!)\n");
		
		alegereKernelDistance = 45; 
		//scanf("%d", &alegereKernelDistance);

		if (alegereKernelDistance < 0)
		{
			printf("\nNu ati introdus alegerea bine!\n");
			continue;
		}





		//5) Pentru distanta dintre litere: In functie de aceasta distanta se pun
		//spatiile intre litere in mod diferit; (In general 50 este o alegere buna)
		int distantaLitere = 0;
		printf("\n\nAlegerea distantei intre litere (Preferabil 50): (De la 0 in sus! Fara numere negative!)\n");
		

		//INCERC CAT DE MULTE!!!
		//distantaLitere = 55; //45;
		scanf("%d", &distantaLitere);

		if (distantaLitere <= 0)
		{
			printf("\nNu ati introdus alegerea bine!\n");
			continue;
		}






		//6) Daca se doreste afisarea literelor in ordinea gasirii lor:
		int afisareLiterePeRand = 0;
		printf("\n\nDoresti sa afisezi toate literele etichetare pe rand?\n0 = No / 1 = Yes;\n");


		//afisareLiterePeRand = 0;
		scanf("%d", &afisareLiterePeRand);

		if (afisareLiterePeRand < 0 || afisareLiterePeRand > 1)
		{
			printf("\nNu ati introdus alegerea bine!\n");
			continue;
		}






		//INITIALIZARI CITIRE:
		Mat sursa = imread(fname, IMREAD_GRAYSCALE); 

		int height = sursa.rows;
		int width = sursa.cols;

		//MATRICI:
		Mat grayscale = Mat(height, width, CV_8UC1);
		Mat dilatare = Mat(height, width, CV_8UC1);
		Mat binar = Mat(height, width, CV_8UC1);
		Mat labelsColor = Mat(height, width, CV_8UC3);


		//INITIALIZARE: cu alb pentru matrici;
		for (int i = 0; i < height; i++)
		{
			for (int j = 0; j < width; j++)
			{
				grayscale.at<uchar>(i, j) = 255;
				binar.at<uchar>(i, j) = 255;
				labelsColor.at<Vec3b>(i, j) = Vec3b(255, 255, 255);
			}
		}


		//BINARIZARE:
		//Nefolosit in final;
		for (int i = 0; i < height; i++)
		{
			for (int j = 0; j < width; j++)
			{
				int valoareGray = sursa.at<uchar>(i, j);

				if (valoareGray < prag)
				{
					binar.at<uchar>(i, j) = 0;
				}
			}
		}




		//DILATARE DE N ORI: (ales de mai sus)
		//Daca se doreste dilatarea, aici se face operatia;
		for (int t = 0; t < alegereDilatare; t++) 
		{
			//a) Initializarea celei de a 2-a matrici:
			for (int i = 0; i < height; i++)
			{
				for (int j = 0; j < width; j++)
				{
					dilatare.at<uchar>(i, j) = 255;
				}
			}

			//b) Prima dilatare;
			for (int i = 0; i < height; i++)
			{
				for (int j = 0; j < width; j++)
				{
					if (binar.at<uchar>(i, j) == 0)
					{
						kernel8Vecini(&dilatare, i - 1, i + 1, j - 1, j + 1, i, j);
					}
				}
			}

			//c) Mutarea rezultatului:
			for (int i = 0; i < height; i++)
			{
				for (int j = 0; j < width; j++)
				{
					int valoare = dilatare.at<uchar>(i, j);
					binar.at<uchar>(i, j) = valoare;
				}
			}
		}


		//Pentru inceput algoritm etichetare cu 2 parcurgeri:
		int label = 0;
		Mat labels = Mat(height, width, CV_16SC1);


		//INITIALIZEZ MATRICE LABELS;
		for (int i = 0; i < height; i++)
		{
			for (int j = 0; j < width; j++)
			{
				labels.at<short>(i, j) = 0; 
			}
		}


		//Conectiunile;
		vector<vector<int>> labelConnections;


		//ALGORITM PART 1: (Prima parcurgere)
		for (int i = 0; i < height; i++)
		{
			for (int j = 0; j < width; j++)
			{
				if (binar.at<uchar>(i, j) == 0 && labels.at<short>(i, j) == 0)
				{
					vector<int> labelAdiacenta; 

					labelAdiacenta.push_back(-1);

					int iCurent = 0;
					int jCurent = 0;

					for (int k = 0; k < 4; k++)
					{
						iCurent = i + vecinAnteriorI[k];
						jCurent = j + vecinAnteriorJ[k];

						if (iCurent >= 0 && iCurent < height && jCurent >= 0 && jCurent < width)
						{
							int valoareNeighb = labels.at<short>(iCurent, jCurent);
							if (valoareNeighb > 0)
							{
								labelAdiacenta.push_back(valoareNeighb);
							}
						}
					}

					if (labelAdiacenta.size() == 1)
					{
						label++;

						int oldSize = label - 1;
						int newSize = label + 1;

						labelConnections.resize(newSize);

						labelConnections[oldSize].push_back(-1);
						labels.at<short>(i, j) = label;
					}
					else
					{
						int minimListaVal = minimLista(labelAdiacenta);
						labels.at<short>(i, j) = minimListaVal;

						int sizeListaFaraMinus1 = labelAdiacenta.size();
						for (int z = 1; z < sizeListaFaraMinus1; z++)
						{
							if (labelAdiacenta[z] != minimListaVal)
							{
								labelConnections[minimListaVal].push_back(labelAdiacenta[z]);
								labelConnections[labelAdiacenta[z]].push_back(minimListaVal);
							}
						}
					}
				}
			}
		}



		//ALGORITM PART 2: (A 2-a parcurgere)
		int newLabel = 0;
		vector<int> newLabels; 
		int newSize = label + 1;
		newLabels.resize(newSize); 
		vector<Vec3b> newColors; 
		newColors.resize(newSize);

		for (int i = 0; i < newSize; i++)
		{
			newLabels[i] = 0;
			newColors[i] = Vec3b(255, 255, 255);
		}

		for (int i = 1; i < newSize; i++)
		{
			if (newLabels[i] == 0)
			{
				newLabel++;

				//3 feluri de culori:
				//Cu generare de culori (gen);
				//Cu rand; (ales in final)
				//Cu grayscale, pentru a vedea mai usor diferenta intre litere;

				//a) Culoarea cu random generare:
				//uchar culoare1 = generareCuloare(alegereCuloare);
				//uchar culoare2 = generareCuloare(alegereCuloare);
				//uchar culoare3 = generareCuloare(alegereCuloare);
				//Vec3b newColor = Vec3b(culoare1, culoare2, culoare3);


				//b) Culoarea cu random generare rand:
				uchar culoare1 = rand() % 256;
				uchar culoare2 = rand() % 256;
			    uchar culoare3 = rand() % 256;
				Vec3b newColor = Vec3b(culoare1, culoare2, culoare3);


				//c) Culoarea cu nuante de gri sa imi dau seama mai usor:
				//uchar culoare1 = newLabel + newLabel * 10; 
				//uchar culoare2 = newLabel + newLabel * 10; 
				//uchar culoare3 = newLabel + newLabel * 10; 
				//Vec3b newColor = Vec3b(culoare1, culoare2, culoare3);


				newColors[i] = newColor;
				newLabels[i] = newLabel; 

				queue<int> q;
				q.push(i);

				while (q.empty() != true)
				{
					int labelCurent = q.front();
					q.pop();

					int sizeLinie = labelConnections[labelCurent].size();

					for (int t = 1; t < sizeLinie; t++)
					{
						int valoareLabelVecin = labelConnections[labelCurent][t];
						int labelCurentVecin = newLabels[valoareLabelVecin];

						if (labelCurentVecin == 0)
						{
							newLabels[valoareLabelVecin] = newLabel;
							newColors[valoareLabelVecin] = newColor;

							q.push(valoareLabelVecin);
						}
					}
				}
			}
		}




		//LABELURI SI CULORI FINALE: (La cum au fost gasite prima data, din primele 2 parcurgeri)
		for (int i = 0; i < height; i++)
		{
			for (int j = 0; j < width; j++)
			{
				int valoare = labels.at<short>(i, j);
				labels.at<short>(i, j) = newLabels[valoare];
				labelsColor.at<Vec3b>(i, j) = newColors[valoare];
			}
		}


		//LABEL FINAL: Inmultit cu 100 pentru a arata mai intens pentru grayscale;
		for (int i = 0; i < height; i++)
		{
			for (int j = 0; j < width; j++)
			{
				int valoare = labels.at<short>(i, j);
				labels.at<short>(i, j) = valoare * 100; 
			}
		}





		//Pentru gasirea caracterelor pentru prima data:
		//Salvez un sir cu toate culorile gasite; (Nu necesar, dar mai usor de vazut dupa culori decat dupa labels)
		Vec3b testAlb = Vec3b(255, 255, 255);
		vector<Vec3b> caractereGasiteInitial; 
		for (int i = 0; i < height; i++)
		{
			for (int j = 0; j < width; j++)
			{
				int flagDiferit = 0;
				Vec3b valoare1 = labelsColor.at<Vec3b>(i, j); 

				if (valoare1[0] == testAlb[0] && valoare1[1] == testAlb[1] 
					&& valoare1[2] == testAlb[2])
				{
					continue;
				}

				int sizeCaractere = caractereGasiteInitial.size();
				for (int z = 0; z < sizeCaractere; z++)
				{
					if (valoare1[0] == caractereGasiteInitial[z][0] && valoare1[1] == caractereGasiteInitial[z][1]
						&& valoare1[2] == caractereGasiteInitial[z][2])
					{
						flagDiferit = 1;
						break;
					}
				}

				if (flagDiferit == 0)
				{
					caractereGasiteInitial.push_back(valoare1);
				}
			}
		}



		
		//Nefolosite:
		vector<Vec3b> caractereGasiteVechi; 
		int kernelDistance = alegereKernelDistance; 




		//Test:
		//Afisare culori:
		/*
		printf("\nAfisare culori:\n");
		for (int i = 0; i < newLabel; i++)
		{
			printf("%d) Avem culorile %d, %d, %d\n", i + 1, caractereGasite[i][0], 
				caractereGasite[i][1], caractereGasite[i][2]);
		}
		printf("\n");
		*/


		

		//Matricile folosite pentru calcule:
		//Maticea finala, cea in care iau litera cu litera in functie de culoare,
		//si cea in care dau resize:
		Mat* caractereMatrice = new Mat[newLabel];
		Mat* resizeCaractere = new Mat[newLabel];
		Mat* resize150 = new Mat[newLabel];


		//Initializari:
		for (int t = 0; t < newLabel; t++)
		{
			caractereMatrice[t] = Mat(height, width, CV_8UC1);
			resizeCaractere[t] = Mat(150, 150, CV_8UC1); 
			resize150[t] = Mat(150, 150, CV_8UC1);
		}


		//Alocari pentru bounding box-ul literelor:
		int* cIMinInit = (int*)calloc(newLabel, sizeof(int));
		int* cIMaxInit = (int*)calloc(newLabel, sizeof(int));
		int* cJMinInit = (int*)calloc(newLabel, sizeof(int));
		int* cJMaxInit = (int*)calloc(newLabel, sizeof(int));

		for (int i = 0; i < newLabel; i++)
		{
			cIMinInit[i] = 10000;
			cJMinInit[i] = 10000;
			cIMaxInit[i] = 0;
			cJMaxInit[i] = 0;
		}


		//Gasesc I, J minime si maxime pentru fiecare litera; (si le salvez in sirurile de mai sus, in functie de cate labels am)
		for (int i = 0; i < height; i++)
		{
			for (int j = 0; j < width; j++)
			{
				Vec3b valoare = labelsColor.at<Vec3b>(i, j);

				for (int t = 0; t < newLabel; t++)
				{
					int cautareCuloare = 0;

					Vec3b caracter = caractereGasiteInitial[t];

					if (valoare[0] == caracter[0] && valoare[1] == caracter[1] && valoare[2] == caracter[2])
					{
						cautareCuloare = 1;

						if (i < cIMinInit[t])
						{
							cIMinInit[t] = i;
						}
						if (i > cIMaxInit[t])
						{
							cIMaxInit[t] = i;
						}
						if (j < cJMinInit[t])
						{
							cJMinInit[t] = j;
						}
						if (j > cJMaxInit[t])
						{
							cJMaxInit[t] = j;
						}
					}
					else
					{
						//Nimic;
					}

					if (cautareCuloare == 1)
					{
						break;
					}
				}
			}
		}




		//Pentru spatii intre litere, linii noi, si centroizii literlor:
		int diferentaLitere = 0; 
		int spatiu = 0;
		int newLine = 0;
		int spatiuFlag = 0;
		int newLineFlag = 0;
		int* centroiziIFirst = (int*)calloc(newLabel, sizeof(int));
		int* centroiziJFirst = (int*)calloc(newLabel, sizeof(int));


		//Calcul centroizi in functie de bounding box;
		for (int t = 0; t < newLabel; t++)
		{
			centroiziIFirst[t] = cIMinInit[t] + (cIMaxInit[t] - cIMinInit[t]) / 2;
			centroiziJFirst[t] = cJMinInit[t] + (cJMaxInit[t] - cJMinInit[t]) / 2;
		}


		//Pentru calcul cate linii sunt in imagine, si unde:
		int linii[100];
		int nrLinii = 0;

		for (int i = 0; i < 100; i++)
		{
			linii[0] = 0;
		}


		//Salvez i pentru fiecare linie gasita in imagine;
		//Ma uit la liniile care au doar alb pentru a delimita liniile cu caractere;
		//Adica prima data cand gasesc o linie doar alba, o salvez si incrementez i;
		//Dupa, astept pana cand gasest din nou o linie doar cu alb, salvez urmatoarea linie si tot asa;
		int flagAlb = 0; 
		for (int i = 0; i < height; i++)
		{
			if (flagAlb == 0)
			{
				int flagCorect = 0;

				for (int j = 0; j < width; j++)
				{
					Vec3b valoare = labelsColor.at<Vec3b>(i, j);

					if (valoare[0] == 255 && valoare[1] == 255 && valoare[2] == 255)
					{
						flagCorect = 0;
					}
					else
					{
						flagCorect = 1;
						break;
					}
				}

				if (flagCorect == 0)
				{
					linii[nrLinii] = i;
					nrLinii++;
					
					flagAlb = 1;
				}
			}
			else
			{
				for (int j = 0; j < width; j++)
				{
					Vec3b valoare = labelsColor.at<Vec3b>(i, j);

					if (valoare[0] != 255 || valoare[1] != 255 || valoare[2] != 255)
					{
						flagAlb = 0;
					}
				}
			}
		}



		//Test:
		//PRINTARE LINII:
		/*
		printf("\nLiniie sunt acestea:\n");
		for (int i = 0; i < nrLinii; i++)
		{
			printf("%d) Linia la coord i: %d\n", i + 1, linii[i]);
		}
		*/




		//PENTRU GASIREA ORDONATA A LABELURILOR:
		//Acum vreau sa reordonez literele, adica etichetele, in ordinea in care sunt ele
		//in imagine, nu cum le gasesc in algoritmul de etichetare;
		//Pentru asta, salvez liniile, ma duc linie cu linie,
		//si compar j pentru toti centroizii liniilor;
		//Asa, voi afla ca o litera este defapt in spatele
		//altei litere, chiar daca am gasit-o dupa;
		//Daca nu faceam impartirea pe linii, nu stiu cum puteam gasi in ordine buna etichetele;
		vector<Vec3b> caractereGasite;

		int inceputLinie = linii[0];
		int finalLinie = linii[1];

		int linieRamasa = 1;

		int listaParticulara[100];
		Vec3b listaParticularaT[100];
		
		//Initializari:
		for (int i = 0; i < 100; i++)
		{
			listaParticulara[i] = 0;
			listaParticularaT[i] = 0;
		}

		int nrElemListaParticulara = 0;
		int nrElemListaFinala = 0;


		//Procesez toate caracterele:
		while (nrElemListaFinala < newLabel)
		{
			for (int t = 0; t < newLabel; t++)
			{
				//Ma uit la toate etichetele care se incadreaza in linia curenta, le salvez;
				if (centroiziIFirst[t] > inceputLinie && centroiziIFirst[t] < finalLinie)
				{
					listaParticulara[nrElemListaParticulara] = centroiziJFirst[t];
					listaParticularaT[nrElemListaParticulara] = caractereGasiteInitial[t];

					nrElemListaParticulara++;
				}
			}


			//Acum pe lista salvata, fac sortarea lor in functie de j;
			//Bubble sort fara flag, pentru sortare centroizi:
			for (int i = 0; i < nrElemListaParticulara; i++)
			{
				for (int j = 0; j < nrElemListaParticulara - i - 1; j++)
				{
					if (listaParticulara[j] > listaParticulara[j + 1])
					{
						int aux1 = listaParticulara[j];
						listaParticulara[j] = listaParticulara[j + 1];
						listaParticulara[j + 1] = aux1;

						Vec3b aux2 = listaParticularaT[j]; 
						listaParticularaT[j] = listaParticularaT[j + 1];
						listaParticularaT[j + 1] = aux2;
					}
				}
			}


			int nrElemNou = nrElemListaFinala + nrElemListaParticulara;
			int nrElemPartPog = 0;

			//Acum adaug, concatenez la ce linii aveam inainte linia noua, in caractereGasite, sirul unde voi avea etichetele ordonate;
			for (int i = nrElemListaFinala; i < nrElemNou; i++)
			{
				caractereGasite.push_back(listaParticularaT[nrElemPartPog]);
				nrElemPartPog++;
			}

			nrElemListaFinala = nrElemNou;
			nrElemListaParticulara = 0;

			//Ma duc in continuare pe linii, pana cand am ajuns la final, acolo ies din while;
			inceputLinie = linii[linieRamasa];
			linieRamasa++;

			if (linieRamasa >= nrLinii)
			{
				break; 
			}

			finalLinie = linii[linieRamasa];
		}






		//Noile valori acum: In loc sa sortez toate sirurile folosite pana acum pentru bounding box si 
		//centroizi, le voi recalcula, pentru a le avea in ordinea noua:
		free(cIMinInit);
		free(cIMaxInit);
		free(cJMinInit);
		free(cJMaxInit);

		//Noile valori:
		int* cIMin = (int*)calloc(newLabel, sizeof(int));
		int* cIMax = (int*)calloc(newLabel, sizeof(int));
		int* cJMin = (int*)calloc(newLabel, sizeof(int));
		int* cJMax = (int*)calloc(newLabel, sizeof(int));

		for (int i = 0; i < newLabel; i++)
		{
			cIMin[i] = 10000;
			cJMin[i] = 10000;
			cIMax[i] = 0;
			cJMax[i] = 0;
		}


		//Aceeasi metoda ca mai sus, doar ca pe noul sir;
		//Acum adaug la matricea de etichete 0 sau 255 in functie de daca am sau nu litera;
		//Acum ca am lista lor ordonata, doar le pun in alta matrice pentru a putea da crop mai tarziu;
		for (int i = 0; i < height; i++)
		{
			for (int j = 0; j < width; j++)
			{
				Vec3b valoare = labelsColor.at<Vec3b>(i, j);

				for (int t = 0; t < newLabel; t++)
				{
					int cautareCuloare = 0;
		
					Vec3b caracter = caractereGasite[t]; 

					if (valoare[0] == caracter[0] && valoare[1] == caracter[1] && valoare[2] == caracter[2])
					{
						cautareCuloare = 1;
						caractereMatrice[t].at<uchar>(i, j) = 0;
						
						if (i < cIMin[t])
						{
							cIMin[t] = i;
						}
						if (i > cIMax[t])
						{
							cIMax[t] = i;
						}
						if (j < cJMin[t])
						{
							cJMin[t] = j;
						}
						if (j > cJMax[t])
						{
							cJMax[t] = j;
						}
					}
					else
					{
						caractereMatrice[t].at<uchar>(i, j) = 255;
					}

					if (cautareCuloare == 1)
					{
						break;
					}
				}
			}
		}



		//Pentru recalcularea centroizilor, la fel ca mai sus:
		free(centroiziIFirst);
		free(centroiziJFirst);

		int* sirSpatiiLiniiNoi = (int*)calloc(newLabel, sizeof(int)); 
		int* centroiziI = (int*)calloc(newLabel, sizeof(int));
		int* centroiziJ = (int*)calloc(newLabel, sizeof(int));
		int* distanteCentroizi = (int*)calloc(newLabel, sizeof(int));

		for (int t = 0; t < newLabel; t++)
		{
			centroiziI[t] = cIMin[t] + (cIMax[t] - cIMin[t]) / 2;
			centroiziJ[t] = cJMin[t] + (cJMax[t] - cJMin[t]) / 2;
		}



		//Pentru a calcula distanta centroizilor;
		//Vreau sa ma uit in fata literei, sa vad cat dureaza pana dau de urmatoarea litera;
		//Daca distanta este prea mare, inseamna ca am spatiu, si trebuie adaugat;
		//Daca nu, inseamna ca sunt una dupa cealalta;
		//Aici verific si daca este spatiu nou, adica daca ajung de la centroid la width,
		//inseamna ca nu a mai fost nimic in fata lui si ca trebuie dat spatiu nou;
		//Salvez intr-un sir pentru litera curenta:
		//0 daca nu are nimic decat litera in fata ei;
		//1 daca are un spatiu in fata literei curente;
		//2 daca are un rand nou in fata literei curente; (Pentru a identifica toate la sirul final)
		
		//Mai bine era sa fac sa verifice pe toata linia daca are ceva in fata, deoarece momentan
		//daca centroidul este prea sus sau jos, atunci va crede ca nu are nimic in fata cand defapt are;
		//Dar este un caz rar intalnit, deci nu am mai incercat sa fixez si aceasta parte;
		for (int t = 0; t < newLabel; t++)
		{
			for (int j = centroiziJ[t]; j < width; j++)
			{
				distanteCentroizi[t]++;

				if (j == width - 1)
				{
					sirSpatiiLiniiNoi[t] = 2;
					break;
				}

				Vec3b valoare = labelsColor.at<Vec3b>(centroiziI[t], j);

				if (valoare[0] != 255 && valoare[1] != 255 && valoare[2] != 255)
				{
					if (valoare[0] != caractereGasite[t][0] && valoare[1]
						!= caractereGasite[t][1] && valoare[1] != caractereGasite[t][2])
					{
						break;
					}
				}
			}
		}





		//Afisarea distantelor finale (pentru a putea vedea cam care este un threshold pentru spatiu nou)
		printf("\nDistantele centroizilor:\n");
		for (int t = 0; t < newLabel; t++)
		{
			if (distanteCentroizi[t] > distantaLitere && sirSpatiiLiniiNoi[t] != 2)
			{
				sirSpatiiLiniiNoi[t] = 1;
			}

			printf("%d) Distanta: %d\n", t + 1, distanteCentroizi[t]);
		}





		//Daca sunt etichete prea mici, le ignor;
		int diferentaIMaxMin = 5; 
		int diferentaJMaxMin = 5; 

		for (int t = 0; t < newLabel; t++)
		{
			if (cIMax[t] - cIMin[t] <= diferentaIMaxMin)
			{
				for (int i = 0; i < 150; i++)
				{
					for (int j = 0; j < 150; j++)
					{
						resize150[t].at<uchar>(i, j) = 255;
					}
				}

				continue;
			}

			if (cJMax[t] - cJMin[t] <= diferentaJMaxMin)
			{
				for (int i = 0; i < 150; i++)
				{
					for (int j = 0; j < 150; j++)
					{
						resize150[t].at<uchar>(i, j) = 255;
					}
				}

				continue;
			}




			//AM ALES SA FAC OPERATIA DE CROP + RESIZE DIN URMATOARELE MOTIVE:
			//Am bounding box-ul fiecarei etichete salvat in ordine, deci este usor sa dau crop la acea parte, si asta fac intr-o matrice intermediara;
			//Pentru a putea compara cu o baza de date existenta, trebuie sa dau resize la acea eticheta si sa fac doar dupa proiectiile;
			//Asa, daca resize-ul schimba prea tare caracterul, nu va mai avea proiectiile destul de bine calculate,
			//dar pentru diferente nu foarte mari, are o acuratete buna;

			//Am ales sa fac acest resize pe o dimensiune de 150x150, pentru ca nici unul din caracterele salvate in baza de date
			//nu depaseste aceasta rezolutie;
			resizeCaractere[t] = caractereMatrice[t](Range(cIMin[t], cIMax[t]), Range(cJMin[t], cJMax[t]));
			resize(resizeCaractere[t], resize150[t], Size(150, 150), INTER_LINEAR); 
		}




		//CALCULUL ARIEI, doar pentru un mod alternativ de a compara literele:
		int* arieResized = (int*)calloc(newLabel, sizeof(int));

		for (int t = 0; t < newLabel; t++)
		{
			for (int i = 0; i < 150; i++)
			{
				for (int j = 0; j < 150; j++)
				{
					int valoare = resize150[t].at<uchar>(i, j);

					if (valoare == 0)
					{
						arieResized[t]++;
					}
				}
			}
		}



		//PENTRU SCRIEREA IN FISIER:
		string textCaracter = "";



		//PENTRU A AVEA 1 SAU 2 ETICHETE AFISATE!
		//Afisez in consola + in fisier aria calculata (pentru 1-2 etichete, deci doar pentru baza mea de date)
		if (caractereGasite.size() <= 2) 
		{
			for (int t = 0; t < newLabel; t++)
			{
				textCaracter = textCaracter + to_string(t + 1) + ") ARIE LABEL: \n";
				textCaracter = textCaracter + to_string(arieResized[t]);
				textCaracter = textCaracter + "\n\n";
				printf("\n%d) Arie resized: %d\n", t + 1, arieResized[t]);
			}
			printf("\n");
		}
		printf("\n");




		//CALCULUL PROIECTIILOR:
		//Am adunat ca la arie, pe linie si pe coloana:
		//Am un sir de 150 de valori pentru fiecare linie si dupa 150 pentru fiecare coloana,
		//pentru fiecare eticheta;
		//Aceste valori le voi folosi pentru compararea caracterelor;
		//Initial nu am dorit sa folosesc proiectiile, dar dupa mai multe incercari,
		//am observat ca par sa fie cea mai buna metoda de a compara caracterele;
		int intervalI = 150;
		int intervalJ = 150;

		int** valoriIntervalI = (int**) calloc(newLabel, sizeof(int*));
		int** valoriIntervalJ = (int**) calloc(newLabel, sizeof(int*));

		for (int t = 0; t < newLabel; t++)
		{
			valoriIntervalI[t] = (int*) calloc(intervalI, sizeof(int));
			valoriIntervalJ[t] = (int*) calloc(intervalJ, sizeof(int));
		}

		//Pentru calculul tuturor proiectiilor;
		for (int t = 0; t < newLabel; t++)
		{
			for (int i = 0; i < 150; i++)
			{
				for (int j = 0; j < 150; j++)
				{
					int valoare = resize150[t].at<uchar>(i, j);

					if (valoare == 0)
					{
						valoriIntervalI[t][i] = valoriIntervalI[t][i] + 1;
						valoriIntervalJ[t][j] = valoriIntervalJ[t][j] + 1;
					}
				}
			}
		}



		//PENTRU MEDIA PROIECTIILOR PE I SI PE J:
		//Un alt mod de comparare litere (la fel de prost ca aria)
		//Calculez media pe I, J, si o folosesc pentru comparatie;
		float* medieI = (float*) calloc(newLabel, sizeof(float));
		float* medieJ = (float*) calloc(newLabel, sizeof(float));
		int* sumaI = (int*) calloc(newLabel, sizeof(int));
		int* sumaJ = (int*) calloc(newLabel, sizeof(int));

		for (int t = 0; t < newLabel; t++)
		{
			for (int i = 0; i < intervalI; i++)
			{
				sumaI[t] = sumaI[t] + valoriIntervalI[t][i];
			}

			for (int j = 0; j < intervalJ; j++)
			{
				sumaJ[t] = sumaJ[t] + valoriIntervalJ[t][j];
			}

			medieI[t] = (float)sumaI[t] / intervalI; 
			medieJ[t] = (float)sumaJ[t] / intervalJ; 
		}





		
		//Ca mai sus, afisez in consola + fisier media la 1 sau 2 etichete;
		//PENTRU O LITERA CU 1 / 2 ETICHETE, PRINTEZ MEDIA: (SI IN FISIER)
		if (caractereGasite.size() <= 2)
		{
			for (int t = 0; t < newLabel; t++)
			{
				if (caractereGasite.size() == 1)
				{
					printf("\nAm gasit un singur caracter! :)\n");
				}
				printf("\nPentru labelul %d:\n", t + 1);
				printf("Pentru i: %f\nPentru j: %f.\n\n", medieI[t], medieJ[t]);
				printf("Done.\n\n");

				//DESTUL!!!
				textCaracter = textCaracter + "\n" + to_string(t + 1) + ") MEDIE LABEL: \n";
				textCaracter = textCaracter + to_string(medieI[t]) + " " + to_string(medieJ[t]);
				textCaracter = textCaracter + "\n\n";
			}
			printf("\n");
		}
		printf("\n");


		



		//Test:
		//AFISARE PENTRU HISTOGRAME:
		/*
		for (int t = 0; t < newLabel; t++)
		{
			showHistogram("Valori i pe labele", valoriIntervalI[t], 150, 150);
			showHistogram("Valori j pe labele", valoriIntervalJ[t], 150, 150);
			waitKey();
		}
		*/





		//La fel ca pentru arie / medie, afisez pentru 1 - 2 etichete toate aceste proiectii, intr-un sir
		//pe care il salvez mai sus in baza de date:
		//PENTRU 1 SAU 2 ETICHETE , AFISEZ TOATE VALORILE DIN PROIECTII:
		if (caractereGasite.size() <= 2) 
		{
			for (int t = 0; t < newLabel; t++)
			{
				textCaracter = textCaracter + "\n" + to_string(t) + ") I:\n";

				int nrSpatiiI = 0;
				int nrSpatiiJ = 0;

				printf("Pentru labelul %d avem urmatoarele valori:\n", t);

				for (int i = 0; i < intervalI - 1; i++)
				{
					nrSpatiiI++;
					if (nrSpatiiI == 13)
					{
						textCaracter = textCaracter + "\n"; 
						nrSpatiiI = 0;
					}

					printf("%d, ", valoriIntervalI[t][i]);
					textCaracter = textCaracter + to_string(valoriIntervalI[t][i]) + ", ";
				}

				printf("%d ;\n", valoriIntervalI[t][intervalI - 1]);
				textCaracter = textCaracter + to_string(valoriIntervalI[t][intervalI - 1]) + " ;";

				textCaracter = textCaracter + "\n\n\n" + to_string(t) + ") J:\n";

				for (int j = 0; j < intervalJ; j++)
				{
					nrSpatiiJ++;
					if (nrSpatiiJ == 13)
					{
						textCaracter = textCaracter + "\n";
						nrSpatiiJ = 0;
					}

					printf("%d, ", valoriIntervalJ[t][j]);
					textCaracter = textCaracter + to_string(valoriIntervalJ[t][j]) + ", ";
				}

				printf("%d ;\n", valoriIntervalJ[t][intervalJ - 1]);
				textCaracter = textCaracter + to_string(valoriIntervalJ[t][intervalI - 1]) + " ;";
			}

			textCaracter = textCaracter + "\nDONE!\n"; 

			outCaracter << textCaracter;
			outCaracter << endl << endl << endl << endl << endl << endl;

			printf("\n");
		}
		printf("\n");






		//STRINGUL FINAL, CEL AFISAT: Aici este declarat
		string stringFinal = "";

		//CELE 5 SIRURI DE ALES IN FUNCTIE DE METODA:
		string stringFinalArie = ""; 
		string stringFinalMedie = "";
		string stringFinalSumaEroriI = "";
		string stringFinalSumaEroriJ = "";
		string stringFinalSumaEroriIJ = ""; 






		//PENTRU AFLAREA STRINGURILOR FINALE:
		//Prima data initializarile:
		//Se opreste dupa ce am terminat de procesat fiecare label:
		for (int t = 0; t < newLabel; t++)
		{
			//VALORI INITIALE SI INTERMEDIARE:
			int minimArie = 1000; 
			float minimMedie = 1000;
			float minimSumaEroriI = 10000;
			float minimSumaEroriJ = 10000;
			float minimSumaEroriIJ = 10000;

			int minimSumaEroriIIntermediara = 0;
			int minimSumaEroriJIntermediara = 0;
			int minimSumaEroriIJIntermediara = 0;

			string alesulArie = "";
			string alesulMedie = "";
			string alesulSumaEroriI = "";
			string alesulSumaEroriJ = "";
			string alesulSumaEroriIJ = "";


			//Trec peste daca nu are arie > 0:
			if (arieResized[t] == 0)
			{
				continue;
			}



			//Am impartit pe cele 4 siruri,
			//literele mici, mari, cifrele, caracterele speciale;
			//La toate procedez la fel:


			//1) Check litere mici:
			//28 nu 26 de litere deoarece am alfabetul englezesc impreuna cu punctul de la i si j;
			for (int i = 0; i < 28; i++) 
			{
				//Ma uit la diferenta ariei in modul, si salvez minimul;
				if (abs(litereMiciArie[i] - arieResized[t]) < minimArie)
				{
					minimArie = abs(litereMiciArie[i] - arieResized[t]);
					alesulArie = litereMiciRezultate[i];
				}

				//La fel pentru medie:
				if (abs(litereMiciMedie[i] - medieI[t]) < minimMedie)
				{
					minimMedie = abs(litereMiciMedie[i] - medieI[t]);
					alesulMedie = litereMiciRezultate[i]; 
				}

				//Pentru proiectii, ma uit la diferenta intre fiecare valoare calculara, si o adun
				//pentru a avea o suma de diferente;
				//Suma cea mai mica de diferente va da eroarea cea mai mica, deci va fi cea mai apropiata
				//de valoarea dorita;
				for (int z = 0; z < 150; z++) 
				{
					minimSumaEroriIIntermediara = minimSumaEroriIIntermediara + abs(litereMiciI[i][z] - valoriIntervalI[t][z]);
				}

				for (int z = 0; z < 150; z++)
				{
					minimSumaEroriJIntermediara = minimSumaEroriJIntermediara + abs(litereMiciJ[i][z] - valoriIntervalJ[t][z]);
				}

				//Aici vad care caracter este in functie de ce am gasit:
				if (minimSumaEroriIIntermediara < minimSumaEroriI)
				{
					minimSumaEroriI = minimSumaEroriIIntermediara;
					alesulSumaEroriI = litereMiciRezultate[i]; 
				}
				if (minimSumaEroriJIntermediara < minimSumaEroriJ)
				{
					minimSumaEroriJ = minimSumaEroriJIntermediara;
					alesulSumaEroriJ = litereMiciRezultate[i];
				}

				minimSumaEroriIJIntermediara = 0;

				//Aici folosesc cea mai buna metoda din cele 5 existente:
				//Folosesc atat proiectia pe linii cat si pe coloane:
				//Va da cel mai bun rezultat;
				minimSumaEroriIJIntermediara = minimSumaEroriIIntermediara + minimSumaEroriJIntermediara;

				if (minimSumaEroriIJIntermediara < minimSumaEroriIJ)
				{
					minimSumaEroriIJ = minimSumaEroriIJIntermediara;
					alesulSumaEroriIJ = litereMiciRezultate[i];
				}

				minimSumaEroriIIntermediara = 0;
				minimSumaEroriJIntermediara = 0;
				minimSumaEroriIJIntermediara = 0;
			}






			//Analog aici, aceleasi calcule:
			//2) Check litere mari:
			for (int i = 0; i < 26; i++)
			{
				if (abs(litereMariArie[i] - arieResized[t]) < minimArie)
				{
					minimArie = abs(litereMariArie[i] - arieResized[t]);
					alesulArie = litereMariRezultate[i];
				}

				if (abs(litereMariMedie[i] - medieI[t]) < minimMedie)
				{
					minimMedie = abs(litereMariMedie[i] - medieI[t]);
					alesulMedie = litereMariRezultate[i];
				}

				for (int z = 0; z < 150; z++)
				{
					minimSumaEroriIIntermediara = minimSumaEroriIIntermediara + abs(litereMariI[i][z] - valoriIntervalI[t][z]);
				}

				for (int z = 0; z < 150; z++)
				{
					minimSumaEroriJIntermediara = minimSumaEroriJIntermediara + abs(litereMariJ[i][z] - valoriIntervalJ[t][z]);
				}

				if (minimSumaEroriIIntermediara < minimSumaEroriI)
				{
					minimSumaEroriI = minimSumaEroriIIntermediara;
					alesulSumaEroriI = litereMariRezultate[i];
				}
				if (minimSumaEroriJIntermediara < minimSumaEroriJ)
				{
					minimSumaEroriJ = minimSumaEroriJIntermediara;
					alesulSumaEroriJ = litereMariRezultate[i];
				}

				minimSumaEroriIJIntermediara = 0;

				minimSumaEroriIJIntermediara = minimSumaEroriIIntermediara + minimSumaEroriJIntermediara; 


				if (minimSumaEroriIJIntermediara < minimSumaEroriIJ)
				{
					minimSumaEroriIJ = minimSumaEroriIJIntermediara;
					alesulSumaEroriIJ = litereMariRezultate[i];
				}

				minimSumaEroriIIntermediara = 0;
				minimSumaEroriJIntermediara = 0;
				minimSumaEroriIJIntermediara = 0;
			}






			//Analog aici, aceleasi calcule: (10 cifre in total)
			//3) Check cifre:
			for (int i = 0; i < 10; i++)
			{
				if (abs(cifreArie[i] - arieResized[t]) < minimArie)
				{
					minimArie = abs(cifreArie[i] - arieResized[t]);
					alesulArie = cifreRezultate[i];
				}

				if (abs(cifreMedie[i] - medieI[t]) < minimMedie)
				{
					minimMedie = abs(cifreMedie[i] - medieI[t]);
					alesulMedie = cifreRezultate[i];
				}

				for (int z = 0; z < 150; z++)
				{
					minimSumaEroriIIntermediara = minimSumaEroriIIntermediara + abs(cifreI[i][z] - valoriIntervalI[t][z]);
				}

				for (int z = 0; z < 150; z++)
				{
					minimSumaEroriJIntermediara = minimSumaEroriJIntermediara + abs(cifreJ[i][z] - valoriIntervalJ[t][z]);
				}

				minimSumaEroriIJIntermediara = minimSumaEroriIIntermediara + minimSumaEroriJIntermediara;

				if (minimSumaEroriIJIntermediara < minimSumaEroriIJ)
				{
					minimSumaEroriIJ = minimSumaEroriIJIntermediara;
					alesulSumaEroriIJ = cifreRezultate[i];
				}

				minimSumaEroriIJIntermediara = 0;

				if (minimSumaEroriIIntermediara < minimSumaEroriI)
				{
					minimSumaEroriI = minimSumaEroriIIntermediara;
					alesulSumaEroriI = cifreRezultate[i];
				}
				if (minimSumaEroriJIntermediara < minimSumaEroriJ)
				{
					minimSumaEroriJ = minimSumaEroriJIntermediara;
					alesulSumaEroriJ = cifreRezultate[i];
				}

				minimSumaEroriIIntermediara = 0;
				minimSumaEroriJIntermediara = 0;
				minimSumaEroriIJIntermediara = 0;
			}





			//Analog aici, aceleasi calcule: (am ales 10 caractele speciale, puteam alege si mai multe, 
			//dar am ales sa ma opresc la 10, este un numar suficient)
			//4) Check caractere speciale:
			for (int i = 0; i < 10; i++)
			{
				if (abs(caractereSpecialeArie[i] - arieResized[t]) < minimArie)
				{
					minimArie = abs(caractereSpecialeArie[i] - arieResized[t]);
					alesulArie = caractereSpecialeRezultate[i];
				}

				if (abs(caractereSpecialeMedie[i] - medieI[t]) < minimMedie)
				{
					minimMedie = abs(caractereSpecialeMedie[i] - medieI[t]);
					alesulMedie = caractereSpecialeRezultate[i];
				}

				for (int z = 0; z < 150; z++)
				{
					minimSumaEroriIIntermediara = minimSumaEroriIIntermediara + abs(caractereSpecialeI[i][z] - valoriIntervalI[t][z]);
				}

				for (int z = 0; z < 150; z++)
				{
					minimSumaEroriJIntermediara = minimSumaEroriJIntermediara + abs(caractereSpecialeJ[i][z] - valoriIntervalJ[t][z]);
				}

				minimSumaEroriIJIntermediara = minimSumaEroriIIntermediara + minimSumaEroriJIntermediara;

				if (minimSumaEroriIJIntermediara < minimSumaEroriIJ)
				{
					minimSumaEroriIJ = minimSumaEroriIJIntermediara;
					alesulSumaEroriIJ = caractereSpecialeRezultate[i];
				}

				minimSumaEroriIJIntermediara = 0;

				if (minimSumaEroriIIntermediara < minimSumaEroriI)
				{
					minimSumaEroriI = minimSumaEroriIIntermediara;
					alesulSumaEroriI = caractereSpecialeRezultate[i];
				}
				if (minimSumaEroriJIntermediara < minimSumaEroriJ)
				{
					minimSumaEroriJ = minimSumaEroriJIntermediara;
					alesulSumaEroriJ = caractereSpecialeRezultate[i];
				}

				minimSumaEroriIIntermediara = 0;
				minimSumaEroriJIntermediara = 0;
				minimSumaEroriIJIntermediara = 0;
			}


			minimSumaEroriIIntermediara = 0;
			minimSumaEroriJIntermediara = 0;
			minimSumaEroriIJIntermediara = 0;






			//Daca am gasit un punct sau punct la i / j,
			//inseamna ca vrem sa trecem peste aceasta eticheta;
			//De exemplu, i contine 2 etichete, si atunci
			//pe una trebuie sa o ignor;
			//Singurul dezavantaz la aceasta operatie este ca
			//. de la final sau de pe parcursul textului va fi ignorat orice ar fi
			//(dar asta ajuta la ;, !, ?, i, j, deci un tradeoff bun);

			//In final, aici se adauga la fiecare din cele 5 stringuri caracterul gasit (cel mai bun)
			if (alesulArie != "" && alesulArie != ".")
			{
				stringFinalArie = stringFinalArie + alesulArie;
			}

			if (alesulMedie != "" && alesulMedie != ".")
			{
				stringFinalMedie = stringFinalMedie + alesulMedie;
			}

			if (alesulSumaEroriI != "" && alesulSumaEroriI != ".")
			{
				stringFinalSumaEroriI = stringFinalSumaEroriI + alesulSumaEroriI;
			}

			if (alesulSumaEroriJ != "" && alesulSumaEroriJ != ".")
			{
				stringFinalSumaEroriJ = stringFinalSumaEroriJ + alesulSumaEroriJ;
			}

			if (alesulSumaEroriIJ != "" && alesulSumaEroriIJ != ".")
			{
				stringFinalSumaEroriIJ = stringFinalSumaEroriIJ + alesulSumaEroriIJ;
			}





			//Dupa caracterul gasit, ma uit daca am 1, adica spatiu dupa el,
			//sau daca am 2, adica rand nou dupa el, 
			//daca da, atunci le salvez in stringuri!
			if (alesulArie != "" && alesulArie != ".") 
			{
				if (sirSpatiiLiniiNoi[t] == 1)
				{
					stringFinalArie = stringFinalArie + " ";
				}
				else if (sirSpatiiLiniiNoi[t] == 2) 
				{
					stringFinalArie = stringFinalArie + "\n";
				}
			}
			if (alesulMedie != "" && alesulMedie != ".")
			{
				if (sirSpatiiLiniiNoi[t] == 1)
				{
					stringFinalMedie = stringFinalMedie + " ";
				}
				else if (sirSpatiiLiniiNoi[t] == 2)
				{
					stringFinalMedie = stringFinalMedie + "\n";
				}
			}
			if (alesulSumaEroriI != "" && alesulSumaEroriI != ".")
			{
				if (sirSpatiiLiniiNoi[t] == 1)
				{
					stringFinalSumaEroriI = stringFinalSumaEroriI + " ";
				}
				else if (sirSpatiiLiniiNoi[t] == 2)
				{
					stringFinalSumaEroriI = stringFinalSumaEroriI + "\n";
				}
			}
			if (alesulSumaEroriJ != "" && alesulSumaEroriJ != ".")
			{
				if (sirSpatiiLiniiNoi[t] == 1)
				{
					stringFinalSumaEroriJ = stringFinalSumaEroriJ + " ";
				}
				else if (sirSpatiiLiniiNoi[t] == 2)
				{
					stringFinalSumaEroriJ = stringFinalSumaEroriJ + "\n";
				}
			}
			if (alesulSumaEroriIJ != "" && alesulSumaEroriIJ != ".")
			{
				if (sirSpatiiLiniiNoi[t] == 1)
				{
					stringFinalSumaEroriIJ = stringFinalSumaEroriIJ + " ";
				}
				else if (sirSpatiiLiniiNoi[t] == 2)
				{
					stringFinalSumaEroriIJ = stringFinalSumaEroriIJ + "\n";
				}
			}
        }




		//Acum in funcie de ce citest, 1 / 2 / 3 / 4 / 5
		//voi alege una din aceste 5 stringuri finale.
		//A 5-a este intotdeauna singura care chiar da rezultate cu o acuratete buna;
		if (alegereFinala == 1)
		{
			stringFinal = stringFinalArie;
		}
		else if (alegereFinala == 2)
		{
			stringFinal = stringFinalMedie;
		}
		else if (alegereFinala == 3)
		{
			stringFinal = stringFinalSumaEroriI;
		}
		else if (alegereFinala == 4)
		{
			stringFinal = stringFinalSumaEroriJ;
		}
		else if (alegereFinala == 5)
		{
			stringFinal = stringFinalSumaEroriIJ;
		}
		else
		{
			printf("\nEroare string final!\n");
		}




		//Free-uri pentru date:
		//a)
		free(sirSpatiiLiniiNoi); 
		free(centroiziI);
		free(centroiziJ);
	    free(distanteCentroizi);
		//b)
		free(cIMin);
		free(cJMin);
		free(cIMax);
		free(cJMax);
		//c)
		free(arieResized);
		//d)
		for (int t = 0; t < newLabel; t++)
		{
			free(valoriIntervalI[t]);
			free(valoriIntervalJ[t]);
		}
		free(valoriIntervalI);
		free(valoriIntervalJ);
		//e)
		free(medieI);
		free(medieJ);
		free(sumaI);
		free(sumaJ);




		//Daca vrem sa afisam toate resizeurile calculate la fiecare pas (deci fiecare eticheta in parte)
		if (afisareLiterePeRand == 1)
		{
			for (int t = 0; t < newLabel; t++)
			{
				imshow("Imaginea color!", labelsColor);
				imshow("Resized!", resize150[t]);
				waitKey();
			}
		}



		//AFISARILE FINALE:
		//1) AFISARE IMAGINE CU LABELS COLOR, PENTRU A VEDEA TEXTUL CE TREBUIE GASIT;
		//2) AFISARE TEXTUL GASIT, TRADUS DIN IMAGINE (CU TOATE POSIBILELE ERORI MENTIONATE MAI SUS	)
		imshow("Imaginea color!", labelsColor);
		printf("\n\n\n!!! STRINGUL FINAL !!!\n\n%s\n!!! STRINGUL FINAL !!!\n\n\n", stringFinal.c_str()); 
		waitKey(); 
    }



	//Dupa ce se iese din while, inchid fisierul;
	outCaracter.close();
}













//Main:
int main()
{
	//Aici salvez datele globale de mai sus;
	//Pentru toate cele 4 categorii, salvez datele + ce trebuie sa dea pentru fiecare (adica rezultatul)




	//A) LITERELE MICI SI MARI:

	//DEFINIRE LITERE MICI: (ARIE)

	litereMiciArie[0] = arieLiteraa;
	litereMiciArie[1] = arieLiterab;
	litereMiciArie[2] = arieLiterac;
	litereMiciArie[3] = arieLiterad;
	litereMiciArie[4] = arieLiterae;
	litereMiciArie[5] = arieLiteraf;
	litereMiciArie[6] = arieLiterag;
	litereMiciArie[7] = arieLiterah;
	litereMiciArie[8] = arieLiterai;
	litereMiciArie[9] = arieLiteraj;
	litereMiciArie[10] = arieLiterak;
	litereMiciArie[11] = arieLiteral;
	litereMiciArie[12] = arieLiteram;
	litereMiciArie[13] = arieLiteran;
	litereMiciArie[14] = arieLiterao;
	litereMiciArie[15] = arieLiterap;
	litereMiciArie[16] = arieLiteraq;
	litereMiciArie[17] = arieLiterar;
	litereMiciArie[18] = arieLiteras;
	litereMiciArie[19] = arieLiterat;
	litereMiciArie[20] = arieLiterau;
	litereMiciArie[21] = arieLiterav;
	litereMiciArie[22] = arieLiteraw;
	litereMiciArie[23] = arieLiterax;
	litereMiciArie[24] = arieLiteray;
	litereMiciArie[25] = arieLiteraz;
	//Noi:
	litereMiciArie[26] = arieLiterapi;
	litereMiciArie[27] = arieLiterapj;


	//DEFINIRE LITERE MARI: (ARIE)

	litereMariArie[0] = arieLiteraA;
	litereMariArie[1] = arieLiteraB;
	litereMariArie[2] = arieLiteraC;
	litereMariArie[3] = arieLiteraD;
	litereMariArie[4] = arieLiteraE;
	litereMariArie[5] = arieLiteraF;
	litereMariArie[6] = arieLiteraG;
	litereMariArie[7] = arieLiteraH;
	litereMariArie[8] = arieLiteraI;
	litereMariArie[9] = arieLiteraJ;
	litereMariArie[10] = arieLiteraK;
	litereMariArie[11] = arieLiteraL;
	litereMariArie[12] = arieLiteraM;
	litereMariArie[13] = arieLiteraN;
	litereMariArie[14] = arieLiteraO;
	litereMariArie[15] = arieLiteraP;
	litereMariArie[16] = arieLiteraQ;
	litereMariArie[17] = arieLiteraR;
	litereMariArie[18] = arieLiteraS;
	litereMariArie[19] = arieLiteraT;
	litereMariArie[20] = arieLiteraU;
	litereMariArie[21] = arieLiteraV;
	litereMariArie[22] = arieLiteraW;
	litereMariArie[23] = arieLiteraX;
	litereMariArie[24] = arieLiteraY;
	litereMariArie[25] = arieLiteraZ;


	//DEFINIRE LITERE MICI: (MEDIE)

	litereMiciMedie[0] = medieIJLiteraa;
	litereMiciMedie[1] = medieIJLiterab;
	litereMiciMedie[2] = medieIJLiterac;
	litereMiciMedie[3] = medieIJLiterad;
	litereMiciMedie[4] = medieIJLiterae;
	litereMiciMedie[5] = medieIJLiteraf;
	litereMiciMedie[6] = medieIJLiterag;
	litereMiciMedie[7] = medieIJLiterah;
	litereMiciMedie[8] = medieIJLiterai;
	litereMiciMedie[9] = medieIJLiteraj;
	litereMiciMedie[10] = medieIJLiterak;
	litereMiciMedie[11] = medieIJLiteral;
	litereMiciMedie[12] = medieIJLiteram;
	litereMiciMedie[13] = medieIJLiteran;
	litereMiciMedie[14] = medieIJLiterao;
	litereMiciMedie[15] = medieIJLiterap;
	litereMiciMedie[16] = medieIJLiteraq;
	litereMiciMedie[17] = medieIJLiterar;
	litereMiciMedie[18] = medieIJLiteras;
	litereMiciMedie[19] = medieIJLiterat;
	litereMiciMedie[20] = medieIJLiterau;
	litereMiciMedie[21] = medieIJLiterav;
	litereMiciMedie[22] = medieIJLiteraw;
	litereMiciMedie[23] = medieIJLiterax;
	litereMiciMedie[24] = medieIJLiteray;
	litereMiciMedie[25] = medieIJLiteraz;
	//Noi:
	litereMiciMedie[26] = medieIJLiterapi;
	litereMiciMedie[27] = medieIJLiterapj;


	//DEFINIRE LITERE MARI: (MEDIE)

	litereMariMedie[0] = medieIJLiteraA;
	litereMariMedie[1] = medieIJLiteraB;
	litereMariMedie[2] = medieIJLiteraC;
	litereMariMedie[3] = medieIJLiteraD;
	litereMariMedie[4] = medieIJLiteraE;
	litereMariMedie[5] = medieIJLiteraF;
	litereMariMedie[6] = medieIJLiteraG;
	litereMariMedie[7] = medieIJLiteraH;
	litereMariMedie[8] = medieIJLiteraI;
	litereMariMedie[9] = medieIJLiteraJ;
	litereMariMedie[10] = medieIJLiteraK;
	litereMariMedie[11] = medieIJLiteraL;
	litereMariMedie[12] = medieIJLiteraM;
	litereMariMedie[13] = medieIJLiteraN;
	litereMariMedie[14] = medieIJLiteraO;
	litereMariMedie[15] = medieIJLiteraP;
	litereMariMedie[16] = medieIJLiteraQ;
	litereMariMedie[17] = medieIJLiteraR;
	litereMariMedie[18] = medieIJLiteraS;
	litereMariMedie[19] = medieIJLiteraT;
	litereMariMedie[20] = medieIJLiteraU;
	litereMariMedie[21] = medieIJLiteraV;
	litereMariMedie[22] = medieIJLiteraW;
	litereMariMedie[23] = medieIJLiteraX;
	litereMariMedie[24] = medieIJLiteraY;
	litereMariMedie[25] = medieIJLiteraZ;




	for (int i = 0; i < 150; i++)
	{
		//DEFINIRE LITERE MICI: (VALORI I)

		litereMiciI[0][i] = valoriILiteraa[i];
		litereMiciI[1][i] = valoriILiterab[i];
		litereMiciI[2][i] = valoriILiterac[i];
		litereMiciI[3][i] = valoriILiterad[i];
		litereMiciI[4][i] = valoriILiterae[i];
		litereMiciI[5][i] = valoriILiteraf[i];
		litereMiciI[6][i] = valoriILiterag[i];
		litereMiciI[7][i] = valoriILiterah[i];
		litereMiciI[8][i] = valoriILiterai[i];
		litereMiciI[9][i] = valoriILiteraj[i];
		litereMiciI[10][i] = valoriILiterak[i];
		litereMiciI[11][i] = valoriILiteral[i];
		litereMiciI[12][i] = valoriILiteram[i];
		litereMiciI[13][i] = valoriILiteran[i];
		litereMiciI[14][i] = valoriILiterao[i];
		litereMiciI[15][i] = valoriILiterap[i];
		litereMiciI[16][i] = valoriILiteraq[i];
		litereMiciI[17][i] = valoriILiterar[i];
		litereMiciI[18][i] = valoriILiteras[i];
		litereMiciI[19][i] = valoriILiterat[i];
		litereMiciI[20][i] = valoriILiterau[i];
		litereMiciI[21][i] = valoriILiterav[i];
		litereMiciI[22][i] = valoriILiteraw[i];
		litereMiciI[23][i] = valoriILiterax[i];
		litereMiciI[24][i] = valoriILiteray[i];
		litereMiciI[25][i] = valoriILiteraz[i];
		//Noi:
		litereMiciI[26][i] = valoriILiterapi[i];
		litereMiciI[27][i] = valoriILiterapj[i];


		//DEFINIRE LITERE MARI: (VALORI I)

		litereMariI[0][i] = valoriILiteraA[i];
		litereMariI[1][i] = valoriILiteraB[i];
		litereMariI[2][i] = valoriILiteraC[i];
		litereMariI[3][i] = valoriILiteraD[i];
		litereMariI[4][i] = valoriILiteraE[i];
		litereMariI[5][i] = valoriILiteraF[i];
		litereMariI[6][i] = valoriILiteraG[i];
		litereMariI[7][i] = valoriILiteraH[i];
		litereMariI[8][i] = valoriILiteraI[i];
		litereMariI[9][i] = valoriILiteraJ[i];
		litereMariI[10][i] = valoriILiteraK[i];
		litereMariI[11][i] = valoriILiteraL[i];
		litereMariI[12][i] = valoriILiteraM[i];
		litereMariI[13][i] = valoriILiteraN[i];
		litereMariI[14][i] = valoriILiteraO[i];
		litereMariI[15][i] = valoriILiteraP[i];
		litereMariI[16][i] = valoriILiteraQ[i];
		litereMariI[17][i] = valoriILiteraR[i];
		litereMariI[18][i] = valoriILiteraS[i];
		litereMariI[19][i] = valoriILiteraT[i];
		litereMariI[20][i] = valoriILiteraU[i];
		litereMariI[21][i] = valoriILiteraV[i];
		litereMariI[22][i] = valoriILiteraW[i];
		litereMariI[23][i] = valoriILiteraX[i];
		litereMariI[24][i] = valoriILiteraY[i];
		litereMariI[25][i] = valoriILiteraZ[i];




		//DEFINIRE LITERE MICI: (VALORI J)

		litereMiciJ[0][i] = valoriJLiteraa[i];
		litereMiciJ[1][i] = valoriJLiterab[i];
		litereMiciJ[2][i] = valoriJLiterac[i];
		litereMiciJ[3][i] = valoriJLiterad[i];
		litereMiciJ[4][i] = valoriJLiterae[i];
		litereMiciJ[5][i] = valoriJLiteraf[i];
		litereMiciJ[6][i] = valoriJLiterag[i];
		litereMiciJ[7][i] = valoriJLiterah[i];
		litereMiciJ[8][i] = valoriJLiterai[i];
		litereMiciJ[9][i] = valoriJLiteraj[i];
		litereMiciJ[10][i] = valoriJLiterak[i];
		litereMiciJ[11][i] = valoriJLiteral[i];
		litereMiciJ[12][i] = valoriJLiteram[i];
		litereMiciJ[13][i] = valoriJLiteran[i];
		litereMiciJ[14][i] = valoriJLiterao[i];
		litereMiciJ[15][i] = valoriJLiterap[i];
		litereMiciJ[16][i] = valoriJLiteraq[i];
		litereMiciJ[17][i] = valoriJLiterar[i];
		litereMiciJ[18][i] = valoriJLiteras[i];
		litereMiciJ[19][i] = valoriJLiterat[i];
		litereMiciJ[20][i] = valoriJLiterau[i];
		litereMiciJ[21][i] = valoriJLiterav[i];
		litereMiciJ[22][i] = valoriJLiteraw[i];
		litereMiciJ[23][i] = valoriJLiterax[i];
		litereMiciJ[24][i] = valoriJLiteray[i];
		litereMiciJ[25][i] = valoriJLiteraz[i];
		//Noi:
		litereMiciJ[26][i] = valoriJLiterapi[i];
		litereMiciJ[27][i] = valoriJLiterapj[i];


		//DEFINIRE LITERE MARI: (VALORI J)

		litereMariJ[0][i] = valoriJLiteraA[i];
		litereMariJ[1][i] = valoriJLiteraB[i];
		litereMariJ[2][i] = valoriJLiteraC[i];
		litereMariJ[3][i] = valoriJLiteraD[i];
		litereMariJ[4][i] = valoriJLiteraE[i];
		litereMariJ[5][i] = valoriJLiteraF[i];
		litereMariJ[6][i] = valoriJLiteraG[i];
		litereMariJ[7][i] = valoriJLiteraH[i];
		litereMariJ[8][i] = valoriJLiteraI[i];
		litereMariJ[9][i] = valoriJLiteraJ[i];
		litereMariJ[10][i] = valoriJLiteraK[i];
		litereMariJ[11][i] = valoriJLiteraL[i];
		litereMariJ[12][i] = valoriJLiteraM[i];
		litereMariJ[13][i] = valoriJLiteraN[i];
		litereMariJ[14][i] = valoriJLiteraO[i];
		litereMariJ[15][i] = valoriJLiteraP[i];
		litereMariJ[16][i] = valoriJLiteraQ[i];
		litereMariJ[17][i] = valoriJLiteraR[i];
		litereMariJ[18][i] = valoriJLiteraS[i];
		litereMariJ[19][i] = valoriJLiteraT[i];
		litereMariJ[20][i] = valoriJLiteraU[i];
		litereMariJ[21][i] = valoriJLiteraV[i];
		litereMariJ[22][i] = valoriJLiteraW[i];
		litereMariJ[23][i] = valoriJLiteraX[i];
		litereMariJ[24][i] = valoriJLiteraY[i];
		litereMariJ[25][i] = valoriJLiteraZ[i];
	}







	//B) CIFRELE:


	//CIFRELE: (ARIE)

	cifreArie[0] = arieLitera0;
	cifreArie[1] = arieLitera1;
	cifreArie[2] = arieLitera2;
	cifreArie[3] = arieLitera3;
	cifreArie[4] = arieLitera4;
	cifreArie[5] = arieLitera5;
	cifreArie[6] = arieLitera6;
	cifreArie[7] = arieLitera7;
	cifreArie[8] = arieLitera8;
	cifreArie[9] = arieLitera9;


	//CIFRELE: (MEDIE)

	cifreMedie[0] = medieIJLitera0;
	cifreMedie[1] = medieIJLitera1;
	cifreMedie[2] = medieIJLitera2;
	cifreMedie[3] = medieIJLitera3;
	cifreMedie[4] = medieIJLitera4;
	cifreMedie[5] = medieIJLitera5;
	cifreMedie[6] = medieIJLitera6;
	cifreMedie[7] = medieIJLitera7;
	cifreMedie[8] = medieIJLitera8;
	cifreMedie[9] = medieIJLitera9;

	for (int i = 0; i < 150; i++)
	{
		//CIFRELE: (VALORI I)

		cifreI[0][i] = valoriILitera0[i];
		cifreI[1][i] = valoriILitera1[i];
		cifreI[2][i] = valoriILitera2[i];
		cifreI[3][i] = valoriILitera3[i];
		cifreI[4][i] = valoriILitera4[i];
		cifreI[5][i] = valoriILitera5[i];
		cifreI[6][i] = valoriILitera6[i];
		cifreI[7][i] = valoriILitera7[i];
		cifreI[8][i] = valoriILitera8[i];
		cifreI[9][i] = valoriILitera9[i];


		//CIFRELE: (VALORI J)

		cifreJ[0][i] = valoriJLitera0[i];
		cifreJ[1][i] = valoriJLitera1[i];
		cifreJ[2][i] = valoriJLitera2[i];
		cifreJ[3][i] = valoriJLitera3[i];
		cifreJ[4][i] = valoriJLitera4[i];
		cifreJ[5][i] = valoriJLitera5[i];
		cifreJ[6][i] = valoriJLitera6[i];
		cifreJ[7][i] = valoriJLitera7[i];
		cifreJ[8][i] = valoriJLitera8[i];
		cifreJ[9][i] = valoriJLitera9[i];
	}









	//C) CARACTERELE SPECIALE:
	//Am ales sa pun 10 caractere speciale, se poate extinde; (In final doar 9, - nu merge;)
	int numarCaractereSpeciale = 10;

	caractereSpecialeArie[0] = arieLiteraLinie;
	caractereSpecialeArie[1] = arieLiteraParantezaD;
	caractereSpecialeArie[2] = arieLiteraParantezaS;
	caractereSpecialeArie[3] = arieLiteraPctVirgula;
	caractereSpecialeArie[4] = arieLiteraSemnExclamare;
	caractereSpecialeArie[5] = arieLiteraSemnIntrebare;
	caractereSpecialeArie[6] = arieLiteraVirgula;
	caractereSpecialeArie[7] = arieLiteraPunct;
	caractereSpecialeArie[8] = arieLiteraPlus;
	caractereSpecialeArie[9] = arieLiteraMaiMic;


	//CARACTERELE SPECIALE: (MEDIE)

	caractereSpecialeMedie[0] = medieIJLiteraLinie;
	caractereSpecialeMedie[1] = medieIJLiteraParantezaD;
	caractereSpecialeMedie[2] = medieIJLiteraParantezaS;
	caractereSpecialeMedie[3] = medieIJLiteraPctVirgula;
	caractereSpecialeMedie[4] = medieIJLiteraSemnExclamare;
	caractereSpecialeMedie[5] = medieIJLiteraSemnIntrebare;
	caractereSpecialeMedie[6] = medieIJLiteraVirgula;
	caractereSpecialeMedie[7] = medieIJLiteraPunct;
	caractereSpecialeMedie[8] = medieIJLiteraPlus;
	caractereSpecialeMedie[9] = medieIJLiteraMaiMic;

	for (int i = 0; i < 150; i++)
	{
	    //CARACTERELE SPECIALE: (VALORI I)

		caractereSpecialeI[0][i] = valoriILiteraLinie[i];
		caractereSpecialeI[1][i] = valoriILiteraParantezaD[i];
		caractereSpecialeI[2][i] = valoriILiteraParantezaS[i];
		caractereSpecialeI[3][i] = valoriILiteraPctVirgula[i];
		caractereSpecialeI[4][i] = valoriILiteraSemnExclamare[i];
		caractereSpecialeI[5][i] = valoriILiteraSemnIntrebare[i];
		caractereSpecialeI[6][i] = valoriILiteraVirgula[i];
		caractereSpecialeI[7][i] = valoriILiteraPunct[i];
		caractereSpecialeI[8][i] = valoriILiteraPlus[i];
		caractereSpecialeI[9][i] = valoriILiteraMaiMic[i];


		//CARACTERELE SPECIALE: (VALORI J)

		caractereSpecialeJ[0][i] = valoriJLiteraLinie[i];
		caractereSpecialeJ[1][i] = valoriJLiteraParantezaD[i];
		caractereSpecialeJ[2][i] = valoriJLiteraParantezaS[i];
		caractereSpecialeJ[3][i] = valoriJLiteraPctVirgula[i];
		caractereSpecialeJ[4][i] = valoriJLiteraSemnExclamare[i];
		caractereSpecialeJ[5][i] = valoriJLiteraSemnIntrebare[i];
		caractereSpecialeJ[6][i] = valoriJLiteraVirgula[i];
		caractereSpecialeJ[7][i] = valoriJLiteraPunct[i];
		caractereSpecialeJ[8][i] = valoriJLiteraPlus[i];
		caractereSpecialeJ[9][i] = valoriJLiteraMaiMic[i];
	}









	//AICI SE GASEST TOATE REZULTATELE ASOCIATE DATELOR GASITE:
	//REZULTATE PENTRU LITERE MICI, MARI, CIFRE, CARACTERE SPECIALE: (Deci toate)


	//LITERE MICI:

	litereMiciRezultate[0] = "a";
	litereMiciRezultate[1] = "b";
	litereMiciRezultate[2] = "c";
	litereMiciRezultate[3] = "d";
	litereMiciRezultate[4] = "e";
	litereMiciRezultate[5] = "f";
	litereMiciRezultate[6] = "g";
	litereMiciRezultate[7] = "h";
	litereMiciRezultate[8] = "i";
	litereMiciRezultate[9] = "j";
	litereMiciRezultate[10] = "k";
	litereMiciRezultate[11] = "l";
	litereMiciRezultate[12] = "m";
	litereMiciRezultate[13] = "n";
	litereMiciRezultate[14] = "o";
	litereMiciRezultate[15] = "p";
	litereMiciRezultate[16] = "q";
	litereMiciRezultate[17] = "r";
	litereMiciRezultate[18] = "s";
	litereMiciRezultate[19] = "t";
	litereMiciRezultate[20] = "u";
	litereMiciRezultate[21] = "v";
	litereMiciRezultate[22] = "w";
	litereMiciRezultate[23] = "x";
	litereMiciRezultate[24] = "y";
	litereMiciRezultate[25] = "z";
	//Noi: se trece peste punctele de i, j, deci la string se adauga nimic!
	litereMiciRezultate[26] = "";
	litereMiciRezultate[27] = "";


	//LITERE MARI:

	litereMariRezultate[0] = "A";
	litereMariRezultate[1] = "B";
	litereMariRezultate[2] = "C";
	litereMariRezultate[3] = "D";
	litereMariRezultate[4] = "E";
	litereMariRezultate[5] = "F";
	litereMariRezultate[6] = "G";
	litereMariRezultate[7] = "H";
	litereMariRezultate[8] = "I";
	litereMariRezultate[9] = "J";
	litereMariRezultate[10] = "K";
	litereMariRezultate[11] = "L";
	litereMariRezultate[12] = "M";
	litereMariRezultate[13] = "N";
	litereMariRezultate[14] = "O";
	litereMariRezultate[15] = "P";
	litereMariRezultate[16] = "Q";
	litereMariRezultate[17] = "R";
	litereMariRezultate[18] = "S";
	litereMariRezultate[19] = "T";
	litereMariRezultate[20] = "U";
	litereMariRezultate[21] = "V";
	litereMariRezultate[22] = "W";
	litereMariRezultate[23] = "X";
	litereMariRezultate[24] = "Y";
	litereMariRezultate[25] = "Z";


	//CIFRE:

	cifreRezultate[0] = "0";
	cifreRezultate[1] = "1";
	cifreRezultate[2] = "2";
	cifreRezultate[3] = "3";
	cifreRezultate[4] = "4";
	cifreRezultate[5] = "5";
	cifreRezultate[6] = "6";
	cifreRezultate[7] = "7";
	cifreRezultate[8] = "8";
	cifreRezultate[9] = "9";


	//CARACTERE SPECIALE:

	caractereSpecialeRezultate[0] = ""; 
	caractereSpecialeRezultate[1] = ")";
	caractereSpecialeRezultate[2] = "(";
	caractereSpecialeRezultate[3] = ";";
	caractereSpecialeRezultate[4] = "!";
	caractereSpecialeRezultate[5] = "?";
	caractereSpecialeRezultate[6] = ",";
	caractereSpecialeRezultate[7] = ".";
	caractereSpecialeRezultate[8] = "+";
	caractereSpecialeRezultate[9] = "<"; 





	//Ajustari pentru litere:
	//Pentru unele litere asemanatoare, este greu sa fac diferenta:
	//Un exemplu bun este n si u; Sunt aceeasi litera dar o data intoarsa;
	//Asa ca pentru unele caractere, fac mici ajustari pentru a ajuta sa se diferentieze mai bine;
	///*
	for (int i = 0; i < 150; i++)
	{
		//Exemplu:
		//litereMiciI[20][i]--;
		//litereMiciJ[20][i]--;
		//litereMiciI[20][i]--;
		//litereMiciJ[20][i]--;
		//LA FIECARE CU +- 3;


		//Singur:
		//a) Pentru u: (-) (n nu trebuie!) Sau -3; (Sa fie diferit fata de n)
		litereMiciI[20][i] = litereMiciI[20][i] - 3;
		litereMiciJ[20][i] = litereMiciJ[20][i] - 3;



		//Pereche: (Si i, sa nu le recunoasca prost :))
		//b) Pentru l: (+)
		//litereMiciI[11][i] = litereMiciI[11][i] + 3;
		//litereMiciJ[11][i] = litereMiciJ[11][i] + 3;


		//c) Pentru I: (-)
		//litereMariI[8][i] = litereMariI[8][i] - 10;
		//litereMariJ[8][i] = litereMariJ[8][i] - 10;



		//Pereche:
		//d) Pentru y: (-)
		//litereMiciI[24][i] = litereMiciI[24][i] - 3;
		//litereMiciJ[24][i] = litereMiciJ[24][i] - 3;

		//e) Pentru V: (+)
		//litereMariI[21][i] = litereMariI[21][i] + 5;
		//litereMariJ[21][i] = litereMariJ[21][i] + 5;



		//Singur:
		//f) Pentru o: (+) (Si pentru 0)
		//litereMiciI[14][i] = litereMiciI[14][i] + 5;
		//litereMiciJ[14][i] = litereMiciJ[14][i] + 5;


		//Singur:
		//g) Final) Pentru ; si ,:
		caractereSpecialeI[3][i] --;
		caractereSpecialeJ[3][i] --;
	}
	//*/






	//IN FINAL:
	//AICI SE ALEGE OPERATIA FINALA:
	//1 = Functia de translatare a textului din imagine;
	//2 = Deschidere imagine (doar pentru afisare);
	//3 = Pentru terminarea programului;
	int operation;
	operation = 100; 
	do
	{
		system("cls");
		destroyAllWindows();

		//PENTRU CE OPERATII SE POT FACE:
		printf(" Operatiile posibile: \n");
		printf(" 1 - Transpunere imagine in text: \n");
		printf(" 2 - Deschide imagine: \n");
		printf(" 3 - Terminare program: \n");
		printf("\n");

		//PENTRU CE OPTIUNI SUNT: 1 FUNCTIA IN SINE, 2 PENTRU DESCHIDERE IMAGINE, 3 PENTRU TERMINARE PROGRAM;
		printf("Alege una din optiunile de mai sus:\n");
		switch (operation)
		{
		    case 1:
				TranspunereImagineInText();
			    break;

			case 2:
				OpenImage();
				break;

			//Defapt cazul de 3 este mai jos:
			//case 3:
			//	exit;
			//	break;
			
			case 100:
				break;
		}

		
		printf("\nOperatia dorita:\n");
		printf("Type Prefered Choice-");

		//Operatia finala:
		scanf("%d", &operation); 

		if (operation != 1 && operation != 2 && operation != 3 && operation != 100)
		{
			printf("\nNu a fost corecta alegerea! Incearca din nou!\n");
		}

		printf("\n");
	}
	while (operation!=3);

	return 0;

	//Proiect finalizat;
}





























































